<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WebFuse</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://webfuse.cn/"/>
  <updated>2020-02-28T03:59:52.437Z</updated>
  <id>http://webfuse.cn/</id>
  
  <author>
    <name>Jesen Kwan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Golang之禅</title>
    <link href="http://webfuse.cn/2020/02/28/Golang%E4%B9%8B%E7%A6%85/"/>
    <id>http://webfuse.cn/2020/02/28/Golang之禅/</id>
    <published>2020-02-28T03:55:12.000Z</published>
    <updated>2020-02-28T03:59:52.437Z</updated>
    
    <content type="html"><![CDATA[<p>文章转载自 OSCHINA 社区 [<a href="http://www.oschina.net" target="_blank" rel="external">http://www.oschina.net</a>]</p>
<p>标题：Golang 之禅</p>
<p>地址：<a href="https://www.oschina.net/news/113606/the-zen-of-go" target="_blank" rel="external">https://www.oschina.net/news/113606/the-zen-of-go</a></p>
<hr>
<p>在本月初的 GopherCon 上，知名 Go 语言贡献者与布道师 Dave Cheney 发表了名为《The Zen of Go》的演讲，之后他整理了演讲内容在博客中分享，由于内容过长，他又写了一个简洁版本：</p>
<p>完整版：<a href="https://dave.cheney.net/2020/02/23/the-zen-of-go" target="_blank" rel="external">https://dave.cheney.net/2020/02/23/the-zen-of-go</a><br>简洁版：<a href="https://the-zen-of-go.netlify.com" target="_blank" rel="external">https://the-zen-of-go.netlify.com</a><br>这里简单翻译一下简洁版本的内容：</p>
<p>编写简单、可读、可维护的 Go 代码的十个工程要点。</p>
<p><strong>每个包实现单一目标</strong></p>
<p>设计良好的 Go 软件包提供一个单一的思路，以及一系列相关的行为。一个好的 Go 软件包首先需要选择一个好名字，使用电梯法则（30 秒内向客户讲清楚一个方案），仅用一个词来思考你的软件包要提供什么功能。</p>
<p><strong>明确处理错误</strong></p>
<p>健壮的程序其实是由处理故障案例的片段组成的，并且需要在故障出现之前处理好。冗余的if err != nil { return err }比出了故障再一个个去处理更有价值。panic 和 recover 也一样。</p>
<p><strong>尽早 return，不要深陷</strong></p>
<p>每次缩进时都会在程序员的堆栈中添加另一个先决条件，这会占用他们短期内存中的 7±2 个片段。避免需要深层缩进的控制流。与其深入嵌套，不如使用守卫子句将成功路径保持在左侧。</p>
<p><strong>并发权留给调用者</strong></p>
<p>让调用者选择是否要异步运行你的库或函数，不要强制他们使用异步。</p>
<p><strong>在启动 goroutine 之前，要知道它什么时候会停止</strong></p>
<p>goroutines 拥有资源、锁、变量与内存等，释放这些资源的可靠方法是停止 goroutine。</p>
<p><strong>避免包级别的状态</strong></p>
<p>要完成明确和减少耦合的操作，需要通过提供类型需要的依赖项作为该类型上的字段，而不是使用包变量。</p>
<p><strong>简单性很重要</strong></p>
<p>简单性不是老练的代名词。简单并不意味着粗糙，它意味着可读性和可维护性。如果可以选择，请遵循较简单的解决方案。</p>
<p><strong>编写测试以确认包 API 的行为</strong></p>
<p>软件包的 API 是与使用者的一份合约，不管先后，不管多少，一定要进行测试。测试是确定合约的保证。要确保测试使用者可以观察和依赖的行为。</p>
<p><strong>如果你认为速度缓慢，先通过基准测试进行验证</strong></p>
<p>以性能之名会犯下许多危害可维护性的罪行。优化会破坏抽象、暴露内部和紧密耦合。如果要付出这样的代价，请确保有充分理由这样做。</p>
<p><strong>节制是一种美德</strong></p>
<p>适度使用 goroutine、通道、锁、接口与嵌套。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章转载自 OSCHINA 社区 [&lt;a href=&quot;http://www.oschina.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.oschina.net&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;标题：Golang 之禅&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Go" scheme="http://webfuse.cn/categories/Go/"/>
    
    
      <category term="Go" scheme="http://webfuse.cn/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Python的logging实践</title>
    <link href="http://webfuse.cn/2019/11/13/Python%E7%9A%84logging%E5%AE%9E%E8%B7%B5/"/>
    <id>http://webfuse.cn/2019/11/13/Python的logging实践/</id>
    <published>2019-11-13T01:51:18.000Z</published>
    <updated>2019-11-22T03:17:50.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用 Python 的时候，logging 一度让我头疼。因为，从 Java 转过来以后，总是想着 logback、log4j 那样的统一配置。在使用过程中折腾了些时候，算是勉强给出了自己比较满意的效果。</p>
<h2 id="logging-使用"><a href="#logging-使用" class="headerlink" title="logging 使用"></a>logging 使用</h2><p>日志的简单使用可以参考官方的<a href="https://docs.python.org/zh-cn/3.7/howto/logging-cookbook.html#" target="_blank" rel="external">《日志操作手册》</a></p>
<p>其他的学习资料有：</p>
<ul>
<li><a href="https://rgb-24bit.github.io/blog/2018/python-logging.html" target="_blank" rel="external">Python 日志模块</a></li>
<li><a href="https://www.doudou0o.com/archives/fe118cd8.html" target="_blank" rel="external">python logging日志模块以及多进程日志</a></li>
<li><a href="https://www.cnblogs.com/yyds/p/6901864.html" target="_blank" rel="external">Python之日志处理（logging模块）</a></li>
</ul>
<h2 id="我的-logging-配置"><a href="#我的-logging-配置" class="headerlink" title="我的 logging 配置"></a>我的 logging 配置</h2><p>我的 logging 配置主要基于 Tornado 的日志模块进行了修改。代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">基于Tornado Log的logger实现.</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> logging.handlers</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Dict, Any, cast, Union, Optional</div><div class="line"></div><div class="line">bytes_type = bytes</div><div class="line">unicode_type = str</div><div class="line">basestring_type = str</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">import</span> colorama  <span class="comment"># type: ignore</span></div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    colorama = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">import</span> curses</div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    curses = <span class="keyword">None</span>  <span class="comment"># type: ignore</span></div><div class="line"></div><div class="line">_TO_UNICODE_TYPES = (unicode_type, type(<span class="keyword">None</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_unicode</span><span class="params">(value: Union[None, str, bytes])</span> -&gt; Optional[str]:</span>  <span class="comment"># noqa: F811</span></div><div class="line">    <span class="string">"""Converts a string argument to a unicode string.</span></div><div class="line"></div><div class="line">    If the argument is already a unicode string or None, it is returned</div><div class="line">    unchanged.  Otherwise it must be a byte string and is decoded as utf8.</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> isinstance(value, _TO_UNICODE_TYPES):</div><div class="line">        <span class="keyword">return</span> value</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, bytes):</div><div class="line">        <span class="keyword">raise</span> TypeError(<span class="string">"Expected bytes, unicode, or None; got %r"</span> % type(value))</div><div class="line">    <span class="keyword">return</span> value.decode(<span class="string">"utf-8"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_stderr_supports_color</span><span class="params">()</span> -&gt; bool:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">if</span> hasattr(sys.stderr, <span class="string">"isatty"</span>) <span class="keyword">and</span> sys.stderr.isatty():</div><div class="line">            <span class="keyword">if</span> curses:</div><div class="line">                curses.setupterm()</div><div class="line">                <span class="keyword">if</span> curses.tigetnum(<span class="string">"colors"</span>) &gt; <span class="number">0</span>:</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">            <span class="keyword">elif</span> colorama:</div><div class="line">                <span class="keyword">if</span> sys.stderr <span class="keyword">is</span> getattr(</div><div class="line">                        colorama.initialise, <span class="string">"wrapped_stderr"</span>, object()</div><div class="line">                ):</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">except</span> Exception:</div><div class="line">        <span class="comment"># Very broad exception handling because it's always better to</span></div><div class="line">        <span class="comment"># fall back to non-colored logs than to break at startup.</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_safe_unicode</span><span class="params">(s: Any)</span> -&gt; str:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">return</span> _unicode(s)</div><div class="line">    <span class="keyword">except</span> UnicodeDecodeError:</div><div class="line">        <span class="keyword">return</span> repr(s)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogFormatter</span><span class="params">(logging.Formatter)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Log formatter used in Tornado.</div><div class="line">    """</div><div class="line"></div><div class="line">    DEFAULT_FORMAT = <span class="string">"%(color)s[%(levelname)1.1s %(asctime)s %(module)s:%(lineno)d]%(end_color)s %(message)s"</span>  <span class="comment"># noqa: E501</span></div><div class="line">    DEFAULT_DATE_FORMAT = <span class="string">"%Y-%m-%d %H:%M:%S"</span></div><div class="line">    DEFAULT_COLORS = &#123;</div><div class="line">        logging.DEBUG: <span class="number">4</span>,  <span class="comment"># Blue</span></div><div class="line">        logging.INFO: <span class="number">2</span>,  <span class="comment"># Green</span></div><div class="line">        logging.WARNING: <span class="number">3</span>,  <span class="comment"># Yellow</span></div><div class="line">        logging.ERROR: <span class="number">1</span>,  <span class="comment"># Red</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(</span></span></div><div class="line">            self,</div><div class="line">            fmt: str = DEFAULT_FORMAT,</div><div class="line">            datefmt: str = DEFAULT_DATE_FORMAT,</div><div class="line">            color: bool = True,</div><div class="line">            colors: Dict[int, int] = DEFAULT_COLORS,</div><div class="line">    ) -&gt; <span class="keyword">None</span>:</div><div class="line">        <span class="string">r"""</span></div><div class="line">        :arg bool color: Enables color support.</div><div class="line">        :arg str fmt: Log message format.</div><div class="line">          It will be applied to the attributes dict of log records. The</div><div class="line">          text between ``%(color)s`` and ``%(end_color)s`` will be colored</div><div class="line">          depending on the level if color support is on.</div><div class="line">        :arg dict colors: color mappings from logging level to terminal color</div><div class="line">          code</div><div class="line">        :arg str datefmt: Datetime format.</div><div class="line">          Used for formatting ``(asctime)`` placeholder in ``prefix_fmt``.</div><div class="line">        """</div><div class="line">        logging.Formatter.__init__(self, datefmt=datefmt)</div><div class="line">        self._fmt = fmt</div><div class="line"></div><div class="line">        self._colors = &#123;&#125;  <span class="comment"># type: Dict[int, str]</span></div><div class="line">        <span class="keyword">if</span> color <span class="keyword">and</span> _stderr_supports_color():</div><div class="line">            <span class="keyword">if</span> curses <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                fg_color = curses.tigetstr(<span class="string">"setaf"</span>) <span class="keyword">or</span> curses.tigetstr(<span class="string">"setf"</span>) <span class="keyword">or</span> <span class="string">b""</span></div><div class="line"></div><div class="line">                <span class="keyword">for</span> levelno, code <span class="keyword">in</span> colors.items():</div><div class="line">                    <span class="comment"># Convert the terminal control characters from</span></div><div class="line">                    <span class="comment"># bytes to unicode strings for easier use with the</span></div><div class="line">                    <span class="comment"># logging module.</span></div><div class="line">                    self._colors[levelno] = unicode_type(</div><div class="line">                        curses.tparm(fg_color, code), <span class="string">"ascii"</span></div><div class="line">                    )</div><div class="line">                self._normal = unicode_type(curses.tigetstr(<span class="string">"sgr0"</span>), <span class="string">"ascii"</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="comment"># If curses is not present (currently we'll only get here for</span></div><div class="line">                <span class="comment"># colorama on windows), assume hard-coded ANSI color codes.</span></div><div class="line">                <span class="keyword">for</span> levelno, code <span class="keyword">in</span> colors.items():</div><div class="line">                    self._colors[levelno] = <span class="string">"\033[2;3%dm"</span> % code</div><div class="line">                self._normal = <span class="string">"\033[0m"</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self._normal = <span class="string">""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">format</span><span class="params">(self, record: Any)</span> -&gt; str:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            message = record.getMessage()</div><div class="line">            <span class="keyword">assert</span> isinstance(message, basestring_type)  <span class="comment"># guaranteed by logging</span></div><div class="line">            record.message = _safe_unicode(message)</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            record.message = <span class="string">"Bad message (%r): %r"</span> % (e, record.__dict__)</div><div class="line"></div><div class="line">        record.asctime = self.formatTime(record, cast(str, self.datefmt))</div><div class="line"></div><div class="line">        <span class="keyword">if</span> record.levelno <span class="keyword">in</span> self._colors:</div><div class="line">            record.color = self._colors[record.levelno]</div><div class="line">            record.end_color = self._normal</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            record.color = record.end_color = <span class="string">""</span></div><div class="line"></div><div class="line">        formatted = self._fmt % record.__dict__</div><div class="line"></div><div class="line">        <span class="keyword">if</span> record.exc_info:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> record.exc_text:</div><div class="line">                record.exc_text = self.formatException(record.exc_info)</div><div class="line">        <span class="keyword">if</span> record.exc_text:</div><div class="line">            lines = [formatted.rstrip()]</div><div class="line">            lines.extend(_safe_unicode(ln) <span class="keyword">for</span> ln <span class="keyword">in</span> record.exc_text.split(<span class="string">"\n"</span>))</div><div class="line">            formatted = <span class="string">"\n"</span>.join(lines)</div><div class="line">        <span class="keyword">return</span> formatted.replace(<span class="string">"\n"</span>, <span class="string">"\n    "</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NullHandler</span><span class="params">(logging.Handler)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">emit</span><span class="params">(self, record)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExactLogLevelFilter</span><span class="params">(logging.Filter)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, level)</span>:</span></div><div class="line">        self.__level = level</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter</span><span class="params">(self, log_record)</span>:</span></div><div class="line">        <span class="keyword">return</span> log_record.levelno == self.__level</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_pretty_logging</span><span class="params">(options: Dict, logger: logging.Logger)</span> -&gt; <span class="keyword">None</span>:</span></div><div class="line">    <span class="comment"># 如果没有设置日志级别</span></div><div class="line">    <span class="keyword">if</span> options[<span class="string">'logging_level'</span>] <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> options[<span class="string">'logging_level'</span>].lower() == <span class="string">"none"</span>:</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> options[<span class="string">'log_file_path'</span>]:</div><div class="line">        rotate_mode = options[<span class="string">'log_rotate_mode'</span>]</div><div class="line">        <span class="keyword">if</span> rotate_mode == <span class="string">"size"</span>:</div><div class="line">            channel = logging.handlers.RotatingFileHandler(</div><div class="line">                filename=options[<span class="string">'log_file_path'</span>],</div><div class="line">                maxBytes=options[<span class="string">'log_file_max_size'</span>],</div><div class="line">                backupCount=options[<span class="string">'log_file_num_backups'</span>],</div><div class="line">                encoding=<span class="string">"utf-8"</span>,</div><div class="line">            )  <span class="comment"># type: logging.Handler</span></div><div class="line">        <span class="keyword">elif</span> rotate_mode == <span class="string">"time"</span>:</div><div class="line">            channel = logging.handlers.TimedRotatingFileHandler(</div><div class="line">                filename=options[<span class="string">'log_file_path'</span>],</div><div class="line">                when=options[<span class="string">'log_rotate_when'</span>],</div><div class="line">                interval=options[<span class="string">'log_rotate_interval'</span>],</div><div class="line">                backupCount=options[<span class="string">'log_file_num_backups'</span>],</div><div class="line">                encoding=<span class="string">"utf-8"</span>,</div><div class="line">            )</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            error_message = (</div><div class="line">                    <span class="string">"The value of log_rotate_mode option should be "</span></div><div class="line">                    + <span class="string">'"size" or "time", not "%s".'</span> % rotate_mode</div><div class="line">            )</div><div class="line">            <span class="keyword">raise</span> ValueError(error_message)</div><div class="line">        channel.setFormatter(LogFormatter(color=<span class="keyword">False</span>))</div><div class="line">        <span class="comment"># 添加通过级别过滤</span></div><div class="line">        channel.addFilter(ExactLogLevelFilter(logging.getLevelName(options[<span class="string">'logging_level'</span>])))</div><div class="line">        logger.addHandler(channel)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> options[<span class="string">'log_to_stderr'</span>] <span class="keyword">or</span> (options[<span class="string">'log_to_stderr'</span>] <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">and</span> <span class="keyword">not</span> logger.handlers):</div><div class="line">        <span class="comment"># Set up color if we are in a tty and curses is installed</span></div><div class="line">        channel = logging.StreamHandler()</div><div class="line">        channel.setFormatter(LogFormatter())</div><div class="line">        logger.addHandler(channel)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_logging</span><span class="params">(logger: logging.Logger = None, options: Dict = None)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"></div><div class="line">    :param logger:</div><div class="line">    :param options:</div><div class="line">        &#123;</div><div class="line">        'log_file_path':'日志文件路径',</div><div class="line">        'logging_level':'日志级别（DEBUG/INFO/WARN/ERROR）',</div><div class="line">        'log_to_stderr':'将日志输出发送到stderr（如果可能的话，将其着色）。如果未设置--log_file_prefix并且未配置其他日志记录，则默认使用stderr。',</div><div class="line">        'log_file_max_size':'每个文件最大的大小，默认：100 * 1000 * 1000',</div><div class="line">        'log_file_num_backups':'要保留的日志文件数',</div><div class="line">        'log_rotate_when':'时间间隔的类型（'S', 'M', 'H', 'D', 'W0'-'W6'）',</div><div class="line">        'log_rotate_interval':'TimedRotatingFileHandler的interval值',</div><div class="line">        'log_rotate_mode':'类型（size/time）'</div><div class="line">        &#125;</div><div class="line">    :return:</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="keyword">if</span> logger <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        logger = logging.getLogger()</div><div class="line"></div><div class="line">    <span class="keyword">if</span> options <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        options = &#123;&#125;</div><div class="line"></div><div class="line">    default_options = &#123;</div><div class="line">        <span class="string">'log_file_path'</span>: <span class="string">''</span>,</div><div class="line">        <span class="string">'logging_level'</span>: <span class="string">'INFO'</span>,</div><div class="line">        <span class="string">'log_to_stderr'</span>: <span class="keyword">None</span>,</div><div class="line">        <span class="string">'log_file_max_size'</span>: <span class="number">100</span> * <span class="number">1000</span> * <span class="number">1000</span>,</div><div class="line">        <span class="string">'log_file_num_backups'</span>: <span class="number">10</span>,</div><div class="line">        <span class="string">'log_rotate_when'</span>: <span class="string">'M'</span>,</div><div class="line">        <span class="string">'log_rotate_interval'</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">'log_rotate_mode'</span>: <span class="string">'time'</span></div><div class="line">    &#125;</div><div class="line">    default_options.update(options)</div><div class="line"></div><div class="line">    <span class="comment"># 设置日志级别</span></div><div class="line">    logger.setLevel(getattr(logging, default_options[<span class="string">'logging_level'</span>].upper()))</div><div class="line"></div><div class="line">    log_level_path = &#123;</div><div class="line">        <span class="string">'DEBUG'</span>: os.path.join(default_options[<span class="string">'log_file_path'</span>], <span class="string">'debug/debug.log'</span>),</div><div class="line">        <span class="string">'INFO'</span>: os.path.join(default_options[<span class="string">'log_file_path'</span>], <span class="string">'info/info.log'</span>),</div><div class="line">        <span class="string">'WARNING'</span>: os.path.join(default_options[<span class="string">'log_file_path'</span>], <span class="string">'warning/warning.log'</span>),</div><div class="line">        <span class="string">'ERROR'</span>: os.path.join(default_options[<span class="string">'log_file_path'</span>], <span class="string">'error/error.log'</span>)</div><div class="line">    &#125;</div><div class="line">    log_levels = log_level_path.keys()</div><div class="line">    <span class="keyword">for</span> level <span class="keyword">in</span> log_levels:</div><div class="line">        log_path = os.path.abspath(log_level_path[level])</div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.dirname(log_path)):</div><div class="line">            os.makedirs(os.path.dirname(log_path))</div><div class="line"></div><div class="line">        default_options.update(&#123;<span class="string">'log_file_path'</span>: log_path, <span class="string">'logging_level'</span>: level&#125;)</div><div class="line"></div><div class="line">        _pretty_logging(options=default_options, logger=logger)</div></pre></td></tr></table></figure>
<p>以上的代码没有考虑到多线程情况下的使用场景，且暂时考虑的是在应用程序中使用的场景。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在使用 Python 的时候，logging 一度让我头疼。因为，从 Java 转过来以后，总是想着 logback、log4j 那样的统一
    
    </summary>
    
      <category term="Python" scheme="http://webfuse.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://webfuse.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Java中AES加解密</title>
    <link href="http://webfuse.cn/2019/07/09/Java%E4%B8%ADAES%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
    <id>http://webfuse.cn/2019/07/09/Java中AES加解密/</id>
    <published>2019-07-09T11:44:52.000Z</published>
    <updated>2019-07-09T12:33:06.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-SDK-对-AES-的实现"><a href="#Java-SDK-对-AES-的实现" class="headerlink" title="Java SDK 对 AES 的实现"></a>Java SDK 对 AES 的实现</h2><p>AES 是 Advanced Encryption Standard 的缩写，也就是 高级加密标准 。具体可以见：<a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86" target="_blank" rel="external">高级加密标准</a>。本文主要讨论使用 Java SDK中对 AES 的实现。</p>
<p>从 <a href="https://docs.oracle.com/javase/7/docs/api/javax/crypto/Cipher.html" target="_blank" rel="external">JDK 的 Cipher 文档</a> 中，知道它支持 4 种 AES 加密模式：</p>
<ul>
<li>AES/CBC/NoPadding (128)</li>
<li>AES/CBC/PKCS5Padding (128)</li>
<li>AES/ECB/NoPadding (128)</li>
<li>AES/ECB/PKCS5Padding (128)</li>
</ul>
<p>AES 是一种加解密算法，那么 CBC, ECB, NoPadding 和 PKCS5Padding 是什么呢？</p>
<p>CBC, CBC 是分组密码工作模式，是对于按块处理密码的加密方式的一种扩充。NoPadding, PKCS5Padding 是填充(Padding)，是对需要按块处理的数据，当数据长度不符合块处理需求时，按照一定方法填充满块长的一种规则。</p>
<blockquote>
<p>关于分组密码工作模式，可以参考： <a href="https://zh.wikipedia.org/wiki/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F" target="_blank" rel="external">分组密码工作模式</a> 和 <a href="https://www.cnblogs.com/starwolf/p/3365834.html" target="_blank" rel="external">AES五种加密模式（CBC、ECB、CTR、OCF、CFB）</a><br>关于填充，可以参考：<a href="https://en.wikipedia.org/wiki/Padding_%28cryptography%29" target="_blank" rel="external">Padding (cryptography)</a></p>
</blockquote>
<p>参考，<a href="https://blog.51cto.com/qiaofengzxq/1748687" target="_blank" rel="external">JAVA AES算法</a> 知道（以下部分的内容为该文章里的内容）：</p>
<ul>
<li>(1)缺省模式和填充为“AES/ECB/PKCS5Padding”，Cipher.getInstance(“AES”)与Cipher.getInstance(“AES/ECB/PKCS5Padding”)等效。</li>
<li>(2)JDK的PKCS5Padding实际是上述的PKCS7的实现。</li>
<li>(3)由于AES是按照16Byte为块进行处理，对于NoPadding而言，如果需要加密的原文长度不是16Byte的倍数，将无法处理抛出异常，其实是由用户自己选择Padding的算法。密文则必然是16Byte的倍数，否则密文肯定异常。</li>
<li>(4)如果加密为PKCS5Padding，解密可以选择NoPadding，也能解密成功，内容为原文加上PKCS5Padding之后的结果。</li>
<li>(5)如果原文最后一个字符为&gt;=0x00&amp;&amp;&lt;=0x10的内容，PKCS5Padding的解密将会出现异常，要么是符合PKCS5Padding，最后的内容被删除，要么不符合，则解密失败抛出异常。对此有两种思路，一是原文通过Base64编码为可见字符，二是原文自带长度使用NoPadding解密。</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.crypto.Cipher;</div><div class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</div><div class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</div><div class="line"><span class="keyword">import</span> java.security.SecureRandom;</div><div class="line"><span class="keyword">import</span> java.util.Base64;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AesUtil</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * AES/CBC/PKCS5Padding加密，然后进行base64加密</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> plainText</div><div class="line">     * <span class="doctag">@param</span> key</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptBase64AESCBC</span><span class="params">(String plainText, String key)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">byte</span>[] clean = plainText.getBytes();</div><div class="line"></div><div class="line">        <span class="comment">//Cipher</span></div><div class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"AES/CBC/PKCS5Padding"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Generating IV.</span></div><div class="line">        <span class="keyword">int</span> ivSize = cipher.getBlockSize();</div><div class="line">        <span class="keyword">byte</span>[] iv = <span class="keyword">new</span> <span class="keyword">byte</span>[ivSize];</div><div class="line">        SecureRandom random = <span class="keyword">new</span> SecureRandom();</div><div class="line">        random.nextBytes(iv);</div><div class="line">        IvParameterSpec ivParameterSpec = <span class="keyword">new</span> IvParameterSpec(iv);</div><div class="line"></div><div class="line">        <span class="comment">// Encrypt.</span></div><div class="line">        SecretKeySpec secretKeySpec = <span class="keyword">new</span> SecretKeySpec(key.getBytes(<span class="string">"UTF-8"</span>), <span class="string">"AES"</span>);</div><div class="line">        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, ivParameterSpec);</div><div class="line">        <span class="keyword">byte</span>[] encrypted = cipher.doFinal(clean);</div><div class="line"></div><div class="line">        <span class="comment">// Combine IV and encrypted part.</span></div><div class="line">        <span class="keyword">byte</span>[] encryptedIVAndText = <span class="keyword">new</span> <span class="keyword">byte</span>[ivSize + encrypted.length];</div><div class="line">        System.arraycopy(iv, <span class="number">0</span>, encryptedIVAndText, <span class="number">0</span>, ivSize);</div><div class="line">        System.arraycopy(encrypted, <span class="number">0</span>, encryptedIVAndText, ivSize, encrypted.length);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> Base64.getEncoder().encodeToString(encryptedIVAndText);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * base64解密后再进行AES/CBC/PKCS5Padding解密</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> encryptedIvText</div><div class="line">     * <span class="doctag">@param</span> key</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decryptBase64AESCBC</span><span class="params">(String encryptedIvText, String key)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">byte</span>[] encryptedIvTextBytes = Base64.getDecoder().decode(encryptedIvText);</div><div class="line"></div><div class="line">        <span class="comment">//Cipher</span></div><div class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"AES/CBC/PKCS5Padding"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Extract IV.</span></div><div class="line">        <span class="keyword">int</span> ivSize = cipher.getBlockSize();</div><div class="line">        <span class="keyword">byte</span>[] iv = <span class="keyword">new</span> <span class="keyword">byte</span>[ivSize];</div><div class="line">        System.arraycopy(encryptedIvTextBytes, <span class="number">0</span>, iv, <span class="number">0</span>, iv.length);</div><div class="line">        IvParameterSpec ivParameterSpec = <span class="keyword">new</span> IvParameterSpec(iv);</div><div class="line"></div><div class="line">        <span class="comment">// Extract encrypted part.</span></div><div class="line">        <span class="keyword">int</span> encryptedSize = encryptedIvTextBytes.length - ivSize;</div><div class="line">        <span class="keyword">byte</span>[] encryptedBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[encryptedSize];</div><div class="line">        System.arraycopy(encryptedIvTextBytes, ivSize, encryptedBytes, <span class="number">0</span>, encryptedSize);</div><div class="line"></div><div class="line">        <span class="comment">// Decrypt.</span></div><div class="line">        SecretKeySpec secretKeySpec = <span class="keyword">new</span> SecretKeySpec(key.getBytes(<span class="string">"UTF-8"</span>), <span class="string">"AES"</span>);</div><div class="line">        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, ivParameterSpec);</div><div class="line">        <span class="keyword">byte</span>[] original = cipher.doFinal(encryptedBytes);</div><div class="line">        String originalString = <span class="keyword">new</span> String(original);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> originalString;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码中 <code>iv</code>的长度为 <code>cipher.getBlockSize()</code>，然后将 <code>iv</code> 放在加密文本的前部分。解密的时候一样先获得 <code>iv</code>，再进行加密内容的解密。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java-SDK-对-AES-的实现&quot;&gt;&lt;a href=&quot;#Java-SDK-对-AES-的实现&quot; class=&quot;headerlink&quot; title=&quot;Java SDK 对 AES 的实现&quot;&gt;&lt;/a&gt;Java SDK 对 AES 的实现&lt;/h2&gt;&lt;p&gt;AES 是 
    
    </summary>
    
      <category term="Java" scheme="http://webfuse.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://webfuse.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot中使用Redis</title>
    <link href="http://webfuse.cn/2019/07/09/SpringBoot%E4%B8%AD%E4%BD%BF%E7%94%A8Redis/"/>
    <id>http://webfuse.cn/2019/07/09/SpringBoot中使用Redis/</id>
    <published>2019-07-09T11:10:56.000Z</published>
    <updated>2019-07-09T11:39:53.006Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍SpringBoot Redis的<strong>基本使用</strong>和<strong>多Redis数据源配置</strong></p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>SpringBoot 2.x项目中引入<code>spring-boot-starter-data-redis</code>：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>查看引入包，发现SpringBoot 2.x 使用的是： <code>lettuce</code> 。</p>
<p>配置 <code>application.yml</code></p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  redis:</span></div><div class="line"><span class="attr">    host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></div><div class="line"><span class="attr">    port:</span> <span class="number">6379</span></div><div class="line"><span class="attr">    password:</span></div><div class="line"><span class="attr">    database:</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</div><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</div></pre></td></tr></table></figure>
<p>SpringBoot Redis的自动化配置位于：<code>RedisAutoConfiguration</code></p>
<h2 id="多Redis数据源配置"><a href="#多Redis数据源配置" class="headerlink" title="多Redis数据源配置"></a>多Redis数据源配置</h2><p>项目中常常用到不止一个Redis数据源，如果按照上面的简单配置，那么很难满足需要。需要我们自己来声明 <code>ConnectionFactory</code> 和 <code>RedisTemplate</code> 。</p>
<p><code>application.yml</code>中配置如下：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  redis:</span>  <span class="comment">#redis配置</span></div><div class="line"><span class="attr">    redis-a:</span></div><div class="line"><span class="attr">      host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></div><div class="line"><span class="attr">      port:</span> <span class="number">6379</span></div><div class="line"><span class="attr">      password:</span> <span class="string">pwd@local</span></div><div class="line"><span class="attr">      ssl:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      database:</span> <span class="number">0</span></div><div class="line"><span class="attr">    redis-b:</span></div><div class="line"><span class="attr">      host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></div><div class="line"><span class="attr">      port:</span> <span class="number">6479</span></div><div class="line"><span class="attr">      password:</span> <span class="string">pwd@local</span></div><div class="line"><span class="attr">      ssl:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      database:</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<p>以上配置是在<code>spring.redis</code>下做区分两个数据源，这是为了能够方便地查找配置位置。</p>
<p>添加<code>RedisConfig.java</code>，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"aRedisTemplate"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">aRedisTemplate</span><span class="params">(</span></span></div><div class="line">            @Qualifier(<span class="string">"aLettuceConnectionFactory"</span>) RedisConnectionFactory aLettuceConnectionFactory) &#123;</div><div class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</div><div class="line">        template.setConnectionFactory(aLettuceConnectionFactory);</div><div class="line">        <span class="keyword">return</span> template;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"bRedisTemplate"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">bRedisTemplate</span><span class="params">(</span></span></div><div class="line">            @Qualifier(<span class="string">"bConnectionFactory"</span>) RedisConnectionFactory bConnectionFactory) &#123;</div><div class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</div><div class="line">        template.setConnectionFactory(bConnectionFactory);</div><div class="line">        <span class="keyword">return</span> template;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"aLettuceConnectionFactory"</span>)</div><div class="line">    <span class="meta">@Primary</span></div><div class="line">    <span class="function"><span class="keyword">public</span> LettuceConnectionFactory <span class="title">aLettuceConnectionFactory</span><span class="params">(@Value(<span class="string">"$&#123;spring.redis.redis-a.host&#125;"</span>)</span> String host,</span></div><div class="line">                                                                   @<span class="title">Value</span><span class="params">(<span class="string">"$&#123;spring.redis.redis-a.port&#125;"</span>)</span> <span class="keyword">int</span> port,</div><div class="line">                                                                   @<span class="title">Value</span><span class="params">(<span class="string">"$&#123;spring.redis.redis-a.password&#125;"</span>)</span> String password,</div><div class="line">                                                                   @<span class="title">Value</span><span class="params">(<span class="string">"$&#123;spring.redis.redis-a.ssl&#125;"</span>)</span> <span class="keyword">boolean</span> ssl,</div><div class="line">                                                                   @<span class="title">Value</span><span class="params">(<span class="string">"$&#123;spring.redis.redis-a.database&#125;"</span>)</span> <span class="keyword">int</span> database) &#123;</div><div class="line"></div><div class="line">        LettuceClientConfiguration.LettuceClientConfigurationBuilder builder = LettuceClientConfiguration.builder();</div><div class="line">        <span class="keyword">if</span> (ssl) &#123;</div><div class="line">            builder.useSsl();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        RedisStandaloneConfiguration standaloneConfiguration = getRedisStandaloneConfiguration(host, port, password, database);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LettuceConnectionFactory(standaloneConfiguration, builder.build());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"bConnectionFactory"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> LettuceConnectionFactory <span class="title">bConnectionFactory</span><span class="params">(@Value(<span class="string">"$&#123;spring.redis.redis-b.host&#125;"</span>)</span> String host,</span></div><div class="line">                                                                   @<span class="title">Value</span><span class="params">(<span class="string">"$&#123;spring.redis.redis-b.port&#125;"</span>)</span> <span class="keyword">int</span> port,</div><div class="line">                                                                   @<span class="title">Value</span><span class="params">(<span class="string">"$&#123;spring.redis.redis-b.password&#125;"</span>)</span> String password,</div><div class="line">                                                                   @<span class="title">Value</span><span class="params">(<span class="string">"$&#123;spring.redis.redis-b.ssl&#125;"</span>)</span> <span class="keyword">boolean</span> ssl,</div><div class="line">                                                                   @<span class="title">Value</span><span class="params">(<span class="string">"$&#123;spring.redis.redis-b.database&#125;"</span>)</span> <span class="keyword">int</span> database) &#123;</div><div class="line"></div><div class="line">        LettuceClientConfiguration.LettuceClientConfigurationBuilder builder = LettuceClientConfiguration.builder();</div><div class="line">        <span class="keyword">if</span> (ssl) &#123;</div><div class="line">            builder.useSsl();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        RedisStandaloneConfiguration standaloneConfiguration = getRedisStandaloneConfiguration(host, port, password, database);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LettuceConnectionFactory(standaloneConfiguration, builder.build());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> RedisStandaloneConfiguration <span class="title">getRedisStandaloneConfiguration</span><span class="params">(String host, <span class="keyword">int</span> port, String password, <span class="keyword">int</span> database)</span> </span>&#123;</div><div class="line">        RedisStandaloneConfiguration standaloneConfiguration = <span class="keyword">new</span> RedisStandaloneConfiguration();</div><div class="line">        standaloneConfiguration.setHostName(host);</div><div class="line">        standaloneConfiguration.setPort(port);</div><div class="line">        standaloneConfiguration.setPassword(password);</div><div class="line">        standaloneConfiguration.setDatabase(database);</div><div class="line">        <span class="keyword">return</span> standaloneConfiguration;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="meta">@Qualifier</span>(<span class="string">"aRedisTemplate"</span>)</div><div class="line"><span class="keyword">private</span> StringRedisTemplate aRedisTemplate;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="meta">@Qualifier</span>(<span class="string">"bRedisTemplate"</span>)</div><div class="line"><span class="keyword">private</span> StringRedisTemplate bRedisTemplate;</div></pre></td></tr></table></figure>
<p>如果想要忽略掉默认的Redis配置，那么可以将 <code>RedisAutoConfiguration</code> 和 <code>RedisReactiveAutoConfiguration</code> 加入忽略：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableAutoConfiguration</span>(exclude = &#123;RedisAutoConfiguration.class, RedisReactiveAutoConfiguration.class&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍SpringBoot Redis的&lt;strong&gt;基本使用&lt;/strong&gt;和&lt;strong&gt;多Redis数据源配置&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;
    
    </summary>
    
      <category term="Spring" scheme="http://webfuse.cn/categories/Spring/"/>
    
      <category term="Spring Boot" scheme="http://webfuse.cn/categories/Spring/Spring-Boot/"/>
    
    
      <category term="实战" scheme="http://webfuse.cn/tags/%E5%AE%9E%E6%88%98/"/>
    
      <category term="Spring Boot" scheme="http://webfuse.cn/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>PMP必须掌握的知识——PMI主义</title>
    <link href="http://webfuse.cn/2019/07/04/PMP%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1%E7%9A%84%E7%9F%A5%E8%AF%86%E2%80%94%E2%80%94PMI%E4%B8%BB%E4%B9%89/"/>
    <id>http://webfuse.cn/2019/07/04/PMP必须掌握的知识——PMI主义/</id>
    <published>2019-07-04T13:50:53.000Z</published>
    <updated>2019-07-04T14:02:35.609Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>你是专业的项目经理，管理是你的核心职能</li>
<li>必须以专业的方法做项目，即遵循 PMBOK 的要求</li>
<li>强调事业环境因素和组织过程资产</li>
<li>强调历史信息，强调经验教训总结，强调记录</li>
<li>问题重在预防，而非解决</li>
<li>必须有明确的目标，必须有正式的计划，才可行动</li>
<li>利害关系者很重要，尽早识别全部并让其参与</li>
<li>项目经理必须被任命，PM 是管理工作的核心责任点</li>
<li>项目是系统工程，PM 是整合者， 三重约束牢记在心</li>
<li>项目管理以结果为导向，项目成功是 PM 最终责任</li>
<li>变更影响项目成功，PM 应影响变更变化，管理变更</li>
<li>整合通过沟通实现，PM 要花 75% ~ 90% 时间用于沟通</li>
<li>PM 应拒绝提供不重要的信息要求</li>
<li>工作必须被详细描述，责任必须明确</li>
<li>任何情况下，质量都要达到客户满意</li>
<li>消减费用的前提是消减项目范围</li>
<li>PM 必须遵守职业道德（个人、公司、社会、道德、法律）</li>
<li>PM 必须主动，PM 是神器、伟大的，可以拯救世界</li>
<li>一切决策必须以事实为依据，以程序为准绳，正确的程序优先于正确的结果</li>
<li>防止范围潜变，杜绝质量镀金</li>
<li>项目必须收尾</li>
<li>公正、公平、公开，勇敢、诚实地面对现实</li>
<li>双赢理念</li>
<li>决策要遵守四大价值观：责任、尊重、公平、诚信</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;你是专业的项目经理，管理是你的核心职能&lt;/li&gt;
&lt;li&gt;必须以专业的方法做项目，即遵循 PMBOK 的要求&lt;/li&gt;
&lt;li&gt;强调事业环境因素和组织过程资产&lt;/li&gt;
&lt;li&gt;强调历史信息，强调经验教训总结，强调记录&lt;/li&gt;
&lt;li&gt;问题重在预防，而非解决&lt;
    
    </summary>
    
      <category term="PMP" scheme="http://webfuse.cn/categories/PMP/"/>
    
    
      <category term="PMP" scheme="http://webfuse.cn/tags/PMP/"/>
    
  </entry>
  
  <entry>
    <title>web3.js编译Solidity，发布，调用全部流程</title>
    <link href="http://webfuse.cn/2019/04/11/web3-js%E7%BC%96%E8%AF%91Solidity%EF%BC%8C%E5%8F%91%E5%B8%83%EF%BC%8C%E8%B0%83%E7%94%A8%E5%85%A8%E9%83%A8%E6%B5%81%E7%A8%8B/"/>
    <id>http://webfuse.cn/2019/04/11/web3-js编译Solidity，发布，调用全部流程/</id>
    <published>2019-04-11T07:53:53.000Z</published>
    <updated>2019-04-11T07:56:46.975Z</updated>
    
    <content type="html"><![CDATA[<p>根据 <a href="http://web3.tryblockchain.org/web3-js-in-action.html" target="_blank" rel="external">web3.js编译Solidity，发布，调用全部流程（手把手教程）</a>进行。因为这篇文章中的一些方法和最新版本的不一样了，中间遇到了一些坑，现把解决方法记录如下：</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>安装 Node.js 、安装以太节点以及合约代码等与<a href="http://web3.tryblockchain.org/web3-js-in-action.html" target="_blank" rel="external">web3.js编译Solidity，发布，调用全部流程（手把手教程）</a>中的一致。</p>
<ul>
<li>安装好的NodeJs版本为：v10.15.3</li>
<li>安装好的以太节点版本为：ethereumjs-testrpc@6.0.3</li>
</ul>
<h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><h3 id="第一个坑：Solidity安装"><a href="#第一个坑：Solidity安装" class="headerlink" title="第一个坑：Solidity安装"></a>第一个坑：Solidity安装</h3><p>按照官方文档使用 <code>npm install -g solc</code> 安装。</p>
<p>安装后验证版本应该使用 <code>solcjs --version</code> ，而不是 <code>solc --version</code> 。而且这边安装的是最新版本，也为后面的步骤埋下了坑。</p>
<h3 id="第二个坑：TypeError-Cannot-read-property-‘solidity’-of-undefined"><a href="#第二个坑：TypeError-Cannot-read-property-‘solidity’-of-undefined" class="headerlink" title="第二个坑：TypeError: Cannot read property ‘solidity’ of undefined"></a>第二个坑：TypeError: Cannot read property ‘solidity’ of undefined</h3><p>使用以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> source = <span class="string">"pragma solidity ^0.4.0;contract Calc&#123;  /*区块链存储*/  uint count;  /*执行会写入数据，所以需要`transaction`的方式执行。*/  function add(uint a, uint b) returns(uint)&#123;    count++;    return a + b;  &#125;  /*执行不会写入数据，所以允许`call`的方式执行。*/  function getCount() returns (uint)&#123;    return count;  &#125;&#125;"</span>;</div><div class="line"><span class="keyword">let</span> calc = web3.eth.compile.solidity(source);</div></pre></td></tr></table></figure>
<p>运行的时候报：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">let calc = web3.eth.compile.solidity(source);</div><div class="line">                            ^</div><div class="line"></div><div class="line">TypeError: Cannot read property 'solidity' of undefined</div><div class="line">    at Object.&lt;anonymous&gt; (/data/eth-contract/src/index.js:15:29)</div><div class="line">    at Module._compile (internal/modules/cjs/loader.js:701:30)</div><div class="line">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:712:10)</div><div class="line">    at Module.load (internal/modules/cjs/loader.js:600:32)</div><div class="line">    at tryModuleLoad (internal/modules/cjs/loader.js:539:12)</div><div class="line">    at Function.Module._load (internal/modules/cjs/loader.js:531:3)</div><div class="line">    at Function.Module.runMain (internal/modules/cjs/loader.js:754:12)</div><div class="line">    at startup (internal/bootstrap/node.js:283:19)</div><div class="line">    at bootstrapNodeJSCore (internal/bootstrap/node.js:622:3)</div></pre></td></tr></table></figure>
<p>这个是因为 Geth 在 1.5.9 版本以后就不支持此功能。见：<a href="https://medium.com/@ksin751119/ethereum-dapp%E5%88%9D%E5%BF%83%E8%80%85%E4%B9%8B%E8%B7%AF-7-web3-eth-compile-solidity-%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88-a020a6763fbd" target="_blank" rel="external">Ethereum Dapp初心者之路(7): web3.eth.compile.solidity()替代方案</a>。</p>
<p>所以参考 <a href="https://ethereum.stackexchange.com/questions/6346/solc-version-command-not-found" target="_blank" rel="external">https://ethereum.stackexchange.com/questions/6346/solc-version-command-not-found</a> 文章，将代码改为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">const</span> solc = <span class="built_in">require</span>(<span class="string">'solc'</span>);</div><div class="line"><span class="keyword">let</span> source = fs.readFileSync(<span class="string">'Calc.sol'</span>, <span class="string">'UTF-8'</span>);</div><div class="line"><span class="keyword">let</span> compilationData = solc.compile(source);</div></pre></td></tr></table></figure>
<h3 id="第三个坑：编译报错"><a href="#第三个坑：编译报错" class="headerlink" title="第三个坑：编译报错"></a>第三个坑：编译报错</h3><p>编译的时候，如果遇到以下报错：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;"errors":[&#123;"component":"general","formattedMessage":"* Line 1, Column 1\n  Syntax error: value, object or array expected.\n* Line 1, Column 2\n  Extra non-whitespace after JSON value.\n","message":"* Line 1, Column 1\n  Syntax error: value, object or array expected.\n* Line 1, Column 2\n  Extra non-whitespace after JSON value.\n","severity":"error","type":"JSONError"&#125;]&#125;</div></pre></td></tr></table></figure>
<p>这个是因为 solc 的版本不对，我们的代码中的版本是 <code>^0.4.0</code> ，而安装的 solc 的版本为 <code>^0.5.7</code> 。应该用一样的版本。</p>
<p>代码中的版本改为<code>^0.5.7</code>，即<code>pragma solidity ^0.5.7;</code>。运行后，报：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">assert.js:350</div><div class="line">    throw err;</div><div class="line">    ^</div><div class="line"></div><div class="line">AssertionError [ERR_ASSERTION]: Invalid callback specified.</div><div class="line">    at wrapCallback (/data/eth-contract/node_modules/solc/wrapper.js:16:5)</div><div class="line">    at runWithReadCallback (/data/eth-contract/node_modules/solc/wrapper.js:42:26)</div><div class="line">    at compileStandard (/data/eth-contract/node_modules/solc/wrapper.js:83:14)</div><div class="line">    at Object.compileStandardWrapper (/data/eth-contract/node_modules/solc/wrapper.js:90:14)</div><div class="line">    at Object.&lt;anonymous&gt; (/data/eth-contract/src/index.js:8:28)</div><div class="line">    at Module._compile (internal/modules/cjs/loader.js:701:30)</div><div class="line">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:712:10)</div><div class="line">    at Module.load (internal/modules/cjs/loader.js:600:32)</div><div class="line">    at tryModuleLoad (internal/modules/cjs/loader.js:539:12)</div><div class="line">    at Function.Module._load (internal/modules/cjs/loader.js:531:3)</div><div class="line">    at Function.Module.runMain (internal/modules/cjs/loader.js:754:12)</div><div class="line">    at startup (internal/bootstrap/node.js:283:19)</div><div class="line">    at bootstrapNodeJSCore (internal/bootstrap/node.js:622:3)</div></pre></td></tr></table></figure>
<p>参考 <a href="https://stackoverflow.com/questions/53353167/npm-solc-assertionerror-err-assertion-invalid-callback-specified" target="_blank" rel="external">https://stackoverflow.com/questions/53353167/npm-solc-assertionerror-err-assertion-invalid-callback-specified</a> 后，如下操作：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm uninstall -g solc</div><div class="line">npm uninstall solc</div><div class="line">npm install solc@0.4.25</div></pre></td></tr></table></figure>
<p>然后将代码中的版本号改为：<code>pragma solidity ^0.4.25;</code></p>
<h2 id="完整源码"><a href="#完整源码" class="headerlink" title="完整源码"></a>完整源码</h2><p>index.js:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Web3 = <span class="built_in">require</span>(<span class="string">'web3'</span>);</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">const</span> solc = <span class="built_in">require</span>(<span class="string">'solc'</span>);</div><div class="line"></div><div class="line"><span class="keyword">let</span> web3;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> web3 !== <span class="string">'undefined'</span>) &#123;</div><div class="line">    web3 = <span class="keyword">new</span> Web3(web3.currentProvider);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// set the provider you want from Web3.providers</span></div><div class="line">    web3 = <span class="keyword">new</span> Web3(<span class="keyword">new</span> Web3.providers.HttpProvider(<span class="string">"http://localhost:8545"</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//编译合约</span></div><div class="line"><span class="keyword">let</span> source = fs.readFileSync(<span class="string">'Calc.sol'</span>, <span class="string">'UTF-8'</span>).toString();</div><div class="line"><span class="keyword">let</span> calcCompiled = solc.compile(source);</div><div class="line"></div><div class="line"><span class="comment">//得到合约对象</span></div><div class="line"><span class="keyword">let</span> jsonInterface = calcCompiled[<span class="string">'contracts'</span>][<span class="string">':Calc'</span>][<span class="string">'interface'</span>];</div><div class="line"></div><div class="line"><span class="comment">//获得abi</span></div><div class="line"><span class="keyword">let</span> abi = <span class="built_in">JSON</span>.parse(jsonInterface);</div><div class="line"></div><div class="line"><span class="comment">//获取合约的代码</span></div><div class="line"><span class="keyword">let</span> bytecode = calcCompiled[<span class="string">'contracts'</span>][<span class="string">':Calc'</span>][<span class="string">'bytecode'</span>]</div><div class="line"></div><div class="line"><span class="comment">//得到合约对象</span></div><div class="line"><span class="keyword">const</span> calcContract = <span class="keyword">new</span> web3.eth.Contract(abi,<span class="literal">null</span>,&#123;</div><div class="line">    <span class="attr">data</span>: <span class="string">'0x'</span>+bytecode, </div><div class="line">    <span class="attr">defaultGas</span>:<span class="string">'4700000'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//部署者的地址，当前取默认账户的第一个地址</span></div><div class="line"><span class="keyword">let</span> deployeAddr = web3.eth.accounts[<span class="number">0</span>];</div><div class="line"></div><div class="line"><span class="comment">//部署合约</span></div><div class="line">calcContract.deploy().send(&#123;</div><div class="line">    <span class="attr">from</span>: deployeAddr</div><div class="line">&#125;)</div><div class="line">.on(<span class="string">'error'</span>, (error) =&gt; &#123; </div><div class="line">    <span class="built_in">console</span>.error(error)</div><div class="line"> &#125;)</div><div class="line">.on(<span class="string">'transactionHash'</span>, (transactionHash) =&gt; &#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"transactionHash :"</span> + transactionHash)</div><div class="line"> &#125;)</div><div class="line">.on(<span class="string">'receipt'</span>, (receipt) =&gt; &#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"receipt:"</span>) </div><div class="line">   <span class="built_in">console</span>.log(receipt) </div><div class="line">&#125;)</div><div class="line">.on(<span class="string">'confirmation'</span>, (confirmationNumber, receipt) =&gt; &#123; </div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"confirmationNumber:"</span>+confirmationNumber)</div><div class="line"> &#125;).then(<span class="function">(<span class="params">newContractInstance</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(newContractInstance)</div><div class="line">    <span class="built_in">console</span>.log(newContractInstance.options.address) <span class="comment">// instance with the new contract address</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Calc.sol:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">pragma solidity ^0.4.25;</div><div class="line"></div><div class="line">contract Calc&#123;</div><div class="line">  /*区块链存储*/</div><div class="line">  uint count;</div><div class="line"></div><div class="line">  /*执行会写入数据，所以需要`transaction`的方式执行。*/</div><div class="line">  function add(uint a, uint b) returns(uint)&#123;</div><div class="line">    count++;</div><div class="line">    return a + b;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /*执行不会写入数据，所以允许`call`的方式执行。*/</div><div class="line">  function getCount() constant returns (uint)&#123;</div><div class="line">    return count;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>package.json:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"eth-contract"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"solc"</span>: <span class="string">"^0.4.25"</span>,</div><div class="line">    <span class="attr">"web3"</span>: <span class="string">"^1.0.0-beta.52"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://web3.tryblockchain.org/web3-js-in-action.html" target="_blank" rel="external">web3.js编译Solidity，发布，调用全部流程（手把手教程）</a></li>
<li><a href="https://web3js.readthedocs.io/en/1.0/index.html" target="_blank" rel="external">web3.js - Ethereum JavaScript API</a></li>
<li><a href="https://solidity-cn.readthedocs.io/zh/develop/index.html" target="_blank" rel="external">Solidity 开发指南</a></li>
<li><a href="http://remix.ethereum.org" target="_blank" rel="external">Remix - Solidity IDE</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据 &lt;a href=&quot;http://web3.tryblockchain.org/web3-js-in-action.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;web3.js编译Solidity，发布，调用全部流程（手把手教程）&lt;/a&gt;进行
    
    </summary>
    
      <category term="区块链" scheme="http://webfuse.cn/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://webfuse.cn/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>初识比特闪电网络</title>
    <link href="http://webfuse.cn/2019/04/08/%E5%88%9D%E8%AF%86%E6%AF%94%E7%89%B9%E9%97%AA%E7%94%B5%E7%BD%91%E7%BB%9C/"/>
    <id>http://webfuse.cn/2019/04/08/初识比特闪电网络/</id>
    <published>2019-04-08T07:41:59.000Z</published>
    <updated>2019-04-08T07:44:19.740Z</updated>
    
    <content type="html"><![CDATA[<p>闪电网络在今年的区块链世界是一个很热门的词。这个词乍听起来很酷炫，很深奥，它到底是什么呢？本文带你了解它。</p>
<h2 id="闪电网络是什么"><a href="#闪电网络是什么" class="headerlink" title="闪电网络是什么"></a>闪电网络是什么</h2><p>官方网站：<a href="http://lightning.network/" target="_blank" rel="external">http://lightning.network/</a></p>
<p>闪电网络（Lightning Network）是一个去中心化的系统。闪电网络的卓越之处在于，无需信任对方以及第三方即可实现实时的、海量的交易网络。这也就解决了比特币支付存在着拥堵的问题。</p>
<p>闪电网络是基于微支付通道演进而来，创造性的设计出了两种类型的交易合约：序列到期可撤销合约RSMC（Revocable Sequence Maturity Contract），哈希时间锁定合约HTLC（Hashed Timelock Contract）。</p>
<p>RSMC解决了通道中币单向流动问题，也就是链下交易的确认问题；HTLC解决了币跨节点传递的问题，也就是支付通道问题。这两个类型的交易组合构成了闪电网络。</p>
<p><strong>1. 入门级文字：</strong></p>
<ul>
<li><a href="https://www.8btc.com/article/375131" target="_blank" rel="external">用大白话解释：闪电网络是什么？</a></li>
<li><a href="https://github.com/diaojibo/StudyNote_Rocklct/blob/master/%E5%8C%BA%E5%9D%97%E9%93%BE/%E9%97%AA%E7%94%B5%E7%BD%91%E7%BB%9C.md" target="_blank" rel="external">闪电网络详解</a></li>
<li><a href="https://www.8btc.com/article/242957" target="_blank" rel="external">闪电网络入门：什么是闪电网络？它是如何运作的？</a></li>
<li><a href="https://www.jianshu.com/p/233b192dc4dc" target="_blank" rel="external">什么是闪电网络？干货都在这了！</a></li>
<li><a href="https://www.jianshu.com/p/2cd6113b2668" target="_blank" rel="external">区块链学堂——闪电网络是什么鬼（故事篇）？</a></li>
<li><a href="https://www.jianshu.com/p/e326802294e1" target="_blank" rel="external">区块链学堂——闪电网络是个什么鬼（技术篇）？</a></li>
</ul>
<p><strong>2. 如果不喜欢文字资料，还可以通过以下两个视频简单入门：</strong></p>
<ul>
<li><a href="https://www.8btc.com/video/345682" target="_blank" rel="external">中心化魔鬼or 扩容灵药，6分钟带你看懂闪电网络！</a></li>
<li><a href="https://www.8btc.com/video/352353" target="_blank" rel="external">闪电网络五大误区，你踩雷了吗？</a></li>
</ul>
<p><strong>3. 白皮书：</strong></p>
<ul>
<li><a href="https://wenku.baidu.com/view/f3bd55ea763231126fdb1150.html" target="_blank" rel="external">比特币闪电网络白皮书：可扩展的 off-chain 即时支付</a></li>
<li><a href="https://lightning.network/lightning-network-paper.pdf" target="_blank" rel="external">The Bitcoin Lightning Network: Scalable Off-Chain Instant Payments</a></li>
</ul>
<p><strong>4. 其他资料：</strong></p>
<ul>
<li><a href="https://lnroute.com/" target="_blank" rel="external">BITCOIN LIGHTNING NETWORK - Resource and Information Guide</a></li>
</ul>
<h2 id="闪电网络的优缺点"><a href="#闪电网络的优缺点" class="headerlink" title="闪电网络的优缺点"></a>闪电网络的优缺点</h2><h3 id="闪电网络的优点"><a href="#闪电网络的优点" class="headerlink" title="闪电网络的优点"></a>闪电网络的优点</h3><ul>
<li>可以即时支付</li>
<li>对节点的性能需求并不高</li>
<li>通过路由系统自动寻径(寻找花费最少的路径)，网络中的节点充分竞争使得交易费用可以低</li>
<li>匿名性(每一个节点只记录该通道内的交易)</li>
</ul>
<h3 id="闪电网络的缺点"><a href="#闪电网络的缺点" class="headerlink" title="闪电网络的缺点"></a>闪电网络的缺点</h3><ul>
<li>如果换一种代币就需要重新开启通道，节点和用户的成本都相当的高</li>
<li>没有足够的商家支持闪电网络，使得作为节点的收益并不高，由于没有足够的商家支持，用户使用闪电网络的需求并不高</li>
<li>闪电网络是小额支付，开启通道是需要使用公网的，使用公网意味着要发起一次交易，如果只转入几百块，一次交易就需要几十块，可能就得不偿失了</li>
<li>关闭通道时,也需要发起交易，将通道中的币分配给通道以及用户，这又需要发起一次交易，又需要发起一次交易</li>
<li>其次每个节点都需要抵押一定的比特币，才能开启节点，长时间暴露在公网中，可能会存在私钥泄露的问题</li>
<li>现阶段闪电网络并不完善处于一个初始版本</li>
</ul>
<h2 id="闪电网络的浏览器"><a href="#闪电网络的浏览器" class="headerlink" title="闪电网络的浏览器"></a>闪电网络的浏览器</h2><ul>
<li><a href="https://1ml.com/" target="_blank" rel="external">1ML</a></li>
<li><a href="https://explorer.acinq.co/" target="_blank" rel="external">Lightning network explorer</a></li>
<li><a href="https://lightblock.me/" target="_blank" rel="external">Lightblock</a></li>
<li><a href="https://www.robtex.com/lightning/node/" target="_blank" rel="external">Robtex Bitcoin Lightning Explorer</a></li>
<li><a href="https://explore.casa/" target="_blank" rel="external">Lightning Explorer (explore casa)</a></li>
<li><a href="https://graph.lndexplorer.com/" target="_blank" rel="external">lndexplorer</a></li>
<li><a href="https://lightning.chaintools.io/" target="_blank" rel="external">Lightning Explorerc(chaintools)</a></li>
<li><a href="https://bitcoinvisuals.com/lightning" target="_blank" rel="external">Bitcoin Visuals</a></li>
<li><a href="https://lnmainnet.rompert.com/" target="_blank" rel="external">rompert.com</a></li>
<li><a href="https://bitcoinexchangerate.org/lightning" target="_blank" rel="external">Bitcoin Exchange Rate</a></li>
</ul>
<p>其他：</p>
<ul>
<li><a href="https://github.com/xsb/lngraph" target="_blank" rel="external">lngraph - Personal private Lightning Network explorer using Neo4j Browser</a></li>
<li><a href="https://gist.github.com/bretton/798ec38165ffabc719d91e0f4f67552d#a-mostly-visual-collection-of-the-lightning-network" target="_blank" rel="external">A (mostly) visual collection of the Lightning Network</a></li>
</ul>
<h2 id="闪电网络的钱包"><a href="#闪电网络的钱包" class="headerlink" title="闪电网络的钱包"></a>闪电网络的钱包</h2><p>闪电网络的钱包可以参考<a href="https://lightningnetworkstores.com/wallets" target="_blank" rel="external">Lightning mobile wallets</a>列表。</p>
<p>GitHub上开源的钱包项目：</p>
<p><strong>桌面</strong></p>
<ul>
<li><a href="https://github.com/lightninglabs/lightning-app" target="_blank" rel="external">lightning-app</a> - NodeJs实现</li>
<li><a href="https://github.com/alexbosworth/lnd-gui" target="_blank" rel="external">lnd-gui</a> - Swift实现</li>
<li><a href="https://github.com/ACINQ/eclair" target="_blank" rel="external">eclair-node-gui</a> - Java实现</li>
<li><a href="https://github.com/LN-Zap/zap-desktop" target="_blank" rel="external">zap-desktop</a> -  Electron+React+Redux实现</li>
<li><a href="https://github.com/icota/presto" target="_blank" rel="external">Presto</a> - C++实现</li>
<li><a href="https://github.com/LightningPeach/lightning-peach-wallet" target="_blank" rel="external">Lightning Peach Wallet</a> - Electron+React+Redux实现</li>
<li><a href="https://github.com/shesek/spark-wallet" target="_blank" rel="external">spark-wallet</a> - NodeJs实现</li>
</ul>
<p><strong>Web</strong></p>
<ul>
<li><a href="https://github.com/Lightning-Family/Discovery-Wallet" target="_blank" rel="external">Discovery wallet</a> - NodeJs实现</li>
<li><a href="https://github.com/marzig76/fulmo" target="_blank" rel="external">fulmo</a> - Python实现</li>
<li><a href="https://github.com/cdecker/kugelblitz" target="_blank" rel="external">kugelblitz</a> - Go实现</li>
<li><a href="https://github.com/mably/lncli-web" target="_blank" rel="external">lncli-web</a> - NodeJS+Angular实现</li>
<li><a href="https://github.com/ShahanaFarooqui/RTL" target="_blank" rel="external">Ride The Lightning (RTL)</a> - NodeJS+Angular7实现</li>
</ul>
<p><strong>移动端</strong></p>
<p>可以参考<a href="https://lightningnetworkstores.com/wallets" target="_blank" rel="external">Lightning mobile wallets</a>中<code>Open source</code>为<code>yes</code>的项目。</p>
<h2 id="闪电网络协议的实现"><a href="#闪电网络协议的实现" class="headerlink" title="闪电网络协议的实现"></a>闪电网络协议的实现</h2><p>在闪电网络的实现方面，现在比较主流的有<a href="https://github.com/lightningnetwork/lnd" target="_blank" rel="external">Lightning Network Daemon</a>、<a href="https://github.com/ACINQ/eclair" target="_blank" rel="external">eclair</a>和<a href="https://github.com/ElementsProject/lightning" target="_blank" rel="external">c-lightning</a>。这三个实现是兼容的。</p>
<h3 id="Lightning-Network-Daemon-LND"><a href="#Lightning-Network-Daemon-LND" class="headerlink" title="Lightning Network Daemon (LND)"></a>Lightning Network Daemon (LND)</h3><p>LND是论文《The Bitcoin Lightning Network: Scalable Off-Chain Instant Payments》中提出者的项目，使用Go语言编写，它比较适用于社区和开发者方面。</p>
<ul>
<li>项目地址：<a href="https://github.com/lightningnetwork/lnd" target="_blank" rel="external">https://github.com/lightningnetwork/lnd</a></li>
<li>LND Developer Site： <a href="https://dev.lightning.community/" target="_blank" rel="external">https://dev.lightning.community/</a></li>
</ul>
<p>开发支持：</p>
<ul>
<li><a href="http://www.lightningj.org/" target="_blank" rel="external">LightningJ - Lightning APIs for Java </a></li>
</ul>
<blockquote>
<p>风险：目前LND还不支持导出私钥<a href="https://github.com/lightningnetwork/lnd/issues/732" target="_blank" rel="external">https://github.com/lightningnetwork/lnd/issues/732</a></p>
</blockquote>
<h3 id="eclair"><a href="#eclair" class="headerlink" title="eclair"></a>eclair</h3><p>Eclair(法语闪电)是闪电网络的Scala实现。它可以运行GUI，也可以不运行GUI，还可以使用JSON-RPC API。因为是Scala开发的，所以适用于所有的java语言，适合商业场景。</p>
<ul>
<li>项目地址：<a href="https://github.com/ACINQ/eclair" target="_blank" rel="external">https://github.com/ACINQ/eclair</a></li>
</ul>
<h3 id="c-lightning"><a href="#c-lightning" class="headerlink" title="c-lightning"></a>c-lightning</h3><p>用C实现的一个规范兼容的闪电网络。</p>
<ul>
<li>项目地址：<a href="https://github.com/ElementsProject/lightning" target="_blank" rel="external">https://github.com/ElementsProject/lightning</a></li>
</ul>
<h3 id="其他实现"><a href="#其他实现" class="headerlink" title="其他实现"></a>其他实现</h3><ul>
<li><a href="https://github.com/raiden-network/raiden" target="_blank" rel="external">Raiden Network</a> - Python实现</li>
<li><a href="https://github.com/mit-dci/lit" target="_blank" rel="external">lit</a> - Go实现</li>
<li><a href="https://github.com/lightningnetwork/lightning-onion" target="_blank" rel="external">lightning-onion</a> - Go实现</li>
<li><a href="https://github.com/nayutaco/ptarmigan" target="_blank" rel="external">ptarmigan</a> - C实现</li>
</ul>
<h2 id="其他资料"><a href="#其他资料" class="headerlink" title="其他资料"></a>其他资料</h2><ul>
<li><a href="https://github.com/bcongdon/awesome-lightning-network" target="_blank" rel="external">Awesome-lightning-network</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;闪电网络在今年的区块链世界是一个很热门的词。这个词乍听起来很酷炫，很深奥，它到底是什么呢？本文带你了解它。&lt;/p&gt;
&lt;h2 id=&quot;闪电网络是什么&quot;&gt;&lt;a href=&quot;#闪电网络是什么&quot; class=&quot;headerlink&quot; title=&quot;闪电网络是什么&quot;&gt;&lt;/a&gt;闪电网络
    
    </summary>
    
      <category term="区块链" scheme="http://webfuse.cn/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://webfuse.cn/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="比特币" scheme="http://webfuse.cn/tags/%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
      <category term="闪电网络" scheme="http://webfuse.cn/tags/%E9%97%AA%E7%94%B5%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker容器构建Bitcoin</title>
    <link href="http://webfuse.cn/2019/03/21/%E4%BD%BF%E7%94%A8Docker%E5%AE%B9%E5%99%A8%E6%9E%84%E5%BB%BABitcoin/"/>
    <id>http://webfuse.cn/2019/03/21/使用Docker容器构建Bitcoin/</id>
    <published>2019-03-21T13:53:32.000Z</published>
    <updated>2019-03-21T13:56:42.695Z</updated>
    
    <content type="html"><![CDATA[<p>虽然说Bitcoin Core有<a href="https://bitcoin.org/zh_CN/download" target="_blank" rel="external">编译好的客户端</a>。但如果能自己编译下源码，感觉也还是不错的。所以就有了以下的图文：</p>
<h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ul>
<li>已经安装好Docker</li>
<li>能够科学上网</li>
</ul>
<h2 id="构建Bitcoin客户端"><a href="#构建Bitcoin客户端" class="headerlink" title="构建Bitcoin客户端"></a>构建Bitcoin客户端</h2><p>从源码构建bitcoin客户端，我们分为以下几步：</p>
<ul>
<li>选择一个Linux，并安装系统依赖库</li>
<li>从github下载代码库，并切换最新的版本</li>
<li>运行autogen.sh脚本</li>
<li>运行configure脚本</li>
<li>运行make和make install</li>
<li>验证bitcoin安装成功</li>
</ul>
<p>所以，我们的Dockerfile如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 基于alpine linux构建</span></div><div class="line"><span class="keyword">FROM</span> alpine</div><div class="line"></div><div class="line"><span class="comment"># 安装安装系统依赖库</span></div><div class="line"><span class="keyword">RUN</span> apk update &amp;&amp; apk add git \ </div><div class="line">                          make \</div><div class="line">                          file \</div><div class="line">                          autoconf \</div><div class="line">                          automake \ </div><div class="line">                          build-base \</div><div class="line">                          libtool \</div><div class="line">                          db-c++ \</div><div class="line">                          db-dev \</div><div class="line">                          boost-system \</div><div class="line">                          boost-program_options \</div><div class="line">                          boost-filesystem \ </div><div class="line">                          boost-dev \ </div><div class="line">                          libressl-dev \ </div><div class="line">                          libevent-dev</div><div class="line"></div><div class="line"><span class="comment"># 下载源码，并切换到最新的分支</span></div><div class="line"><span class="keyword">RUN</span> git clone https://github.com/bitcoin/bitcoin --branch v0.17.0.1 --single-branch</div><div class="line"></div><div class="line"><span class="comment"># 运行autogen.sh脚本 以及 运行configure脚本 以及 运行make和make install</span></div><div class="line"><span class="keyword">RUN</span> (cd bitcoin  &amp;&amp; ./autogen.sh &amp;&amp; \</div><div class="line">                      ./configure --disable-tests \</div><div class="line">                      --disable-bench --disable-static  \</div><div class="line">                      --without-gui --disable-zmq \ </div><div class="line">                      --with-incompatible-bdb \</div><div class="line">                      CFLAGS=<span class="string">'-w'</span> CXXFLAGS=<span class="string">'-w'</span> &amp;&amp; \</div><div class="line">                      make -j <span class="number">4</span> &amp;&amp; \</div><div class="line">                      strip src/bitcoind &amp;&amp; \</div><div class="line">                      strip src/bitcoin-cli &amp;&amp; \</div><div class="line">                      strip src/bitcoin-tx &amp;&amp; \</div><div class="line">                      make install )</div></pre></td></tr></table></figure>
<p>运行<br><code>docker build -f bitcoin.dockerfile -t bitcoin-alpine .</code>构建一个docker镜像。</p>
<p>在成功构建镜像后，通过命令运行镜像<code>docker run -it bitcoin-alpine-bin</code>。</p>
<p>bitcoind 默认的安装位置是/usr/local/bin。你可以通过询问系统下面2个可执行文件的路径，来确认bitcoin是否安装成功。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/ #  which bitcoind</div><div class="line">/usr/local/bin/bitcoind</div><div class="line"></div><div class="line">/ # which bitcoin-cli</div><div class="line">/usr/local/bin/bitcoin-cli</div></pre></td></tr></table></figure>
<p>然后，在运行的容器中运行bitcoin的后台程序：</p>
<p><code>bitcoind -server=1 -rest=1 -regtest -txindex=1 -daemon</code></p>
<p>通过运行<code>bitcoin-cli -regtest getblockchaininfo</code>，<code>bitcoin-cli -regtest getnetworkinfo</code>，<code>bitcoin-cli -regtest getwalletinfo</code>可以获得到相关的状态信息。</p>
<p>其中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- getblockchaininfo: blocks, difficulty, chain</div><div class="line">- getnetworkinfo: version, protocolversion, timeoffset, connections, proxy, relayfee, warnings</div><div class="line">- getwalletinfo: balance, keypoololdest, keypoolsize, paytxfee, unlocked_until, walletversion</div></pre></td></tr></table></figure>
<hr>
<p>参考：</p>
<ul>
<li><a href="https://leftasexercise.com/2018/04/12/building-a-bitcoin-container-with-docker/" target="_blank" rel="external">https://leftasexercise.com/2018/04/12/building-a-bitcoin-container-with-docker/</a></li>
<li><a href="https://www.codeooze.com/blockchain/bitcoind-running-in-docker/" target="_blank" rel="external">https://www.codeooze.com/blockchain/bitcoind-running-in-docker/</a></li>
<li><a href="http://blog.fens.me/bitcoin-install/" target="_blank" rel="external">http://blog.fens.me/bitcoin-install/</a></li>
<li><a href="https://github.com/alexfoster/bitcoin-dockerfile/blob/master/Dockerfile" target="_blank" rel="external">https://github.com/alexfoster/bitcoin-dockerfile/blob/master/Dockerfile</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然说Bitcoin Core有&lt;a href=&quot;https://bitcoin.org/zh_CN/download&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;编译好的客户端&lt;/a&gt;。但如果能自己编译下源码，感觉也还是不错的。所以就有了以下的图文：&lt;
    
    </summary>
    
      <category term="区块链" scheme="http://webfuse.cn/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Docker" scheme="http://webfuse.cn/tags/Docker/"/>
    
      <category term="区块链" scheme="http://webfuse.cn/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="比特币" scheme="http://webfuse.cn/tags/%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>基于Docker搭建比特币测试网络</title>
    <link href="http://webfuse.cn/2019/03/21/%E5%9F%BA%E4%BA%8EDocker%E6%90%AD%E5%BB%BA%E6%AF%94%E7%89%B9%E5%B8%81%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C/"/>
    <id>http://webfuse.cn/2019/03/21/基于Docker搭建比特币测试网络/</id>
    <published>2019-03-21T13:50:00.000Z</published>
    <updated>2019-03-21T13:56:46.022Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建比特币测试网络"><a href="#搭建比特币测试网络" class="headerlink" title="搭建比特币测试网络"></a>搭建比特币测试网络</h2><h3 id="下载比特币测试网络镜像"><a href="#下载比特币测试网络镜像" class="headerlink" title="下载比特币测试网络镜像"></a>下载比特币测试网络镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~  docker pull freewill/bitcoin-testnet-box</div></pre></td></tr></table></figure>
<p>运行<code>docker images</code>查看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">REPOSITORY                           TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">freewil/bitcoin-testnet-box          latest              4dac47b76f09        4 months ago        262MB</div></pre></td></tr></table></figure>
<h3 id="运行Docker镜像"><a href="#运行Docker镜像" class="headerlink" title="运行Docker镜像"></a>运行Docker镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -t -i -p 19001:19001 -p 19011:19011 freewil/bitcoin-testnet-box</div></pre></td></tr></table></figure>
<p>上述命令中的19001 和 19011是配置给两个节点提供RPC服务的端口。</p>
<h3 id="启动比特币测试网络"><a href="#启动比特币测试网络" class="headerlink" title="启动比特币测试网络"></a>启动比特币测试网络</h3><p>运行<code>make start</code>命令启动。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tester@84fdf4019179 ~/bitcoin-testnet-box$ make start</div><div class="line">bitcoind -datadir=1  -daemon</div><div class="line">Bitcoin server starting</div><div class="line">bitcoind -datadir=2  -daemon</div><div class="line">Bitcoin server starting</div></pre></td></tr></table></figure>
<h3 id="查看节点信息"><a href="#查看节点信息" class="headerlink" title="查看节点信息"></a>查看节点信息</h3><p>使用<code>make getinfo</code>命令获得节点信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">tester@84fdf4019179 ~/bitcoin-testnet-box$ make getinfo</div><div class="line">bitcoin-cli -datadir=1  -getinfo</div><div class="line">&#123;</div><div class="line">  &quot;version&quot;: 160200,</div><div class="line">  &quot;protocolversion&quot;: 70015,</div><div class="line">  &quot;walletversion&quot;: 159900,</div><div class="line">  &quot;balance&quot;: 0.00000000,</div><div class="line">  &quot;blocks&quot;: 0,</div><div class="line">  &quot;timeoffset&quot;: 0,</div><div class="line">  &quot;connections&quot;: 1,</div><div class="line">  &quot;proxy&quot;: &quot;&quot;,</div><div class="line">  &quot;difficulty&quot;: 4.656542373906925e-10,</div><div class="line">  &quot;testnet&quot;: false,</div><div class="line">  &quot;keypoololdest&quot;: 1544519547,</div><div class="line">  &quot;keypoolsize&quot;: 1000,</div><div class="line">  &quot;paytxfee&quot;: 0.00000000,</div><div class="line">  &quot;relayfee&quot;: 0.00001000,</div><div class="line">  &quot;warnings&quot;: &quot;&quot;</div><div class="line">&#125;</div><div class="line">bitcoin-cli -datadir=2  -getinfo</div><div class="line">&#123;</div><div class="line">  &quot;version&quot;: 160200,</div><div class="line">  &quot;protocolversion&quot;: 70015,</div><div class="line">  &quot;walletversion&quot;: 159900,</div><div class="line">  &quot;balance&quot;: 0.00000000,</div><div class="line">  &quot;blocks&quot;: 0,</div><div class="line">  &quot;timeoffset&quot;: 0,</div><div class="line">  &quot;connections&quot;: 1,</div><div class="line">  &quot;proxy&quot;: &quot;&quot;,</div><div class="line">  &quot;difficulty&quot;: 4.656542373906925e-10,</div><div class="line">  &quot;testnet&quot;: false,</div><div class="line">  &quot;keypoololdest&quot;: 1544519547,</div><div class="line">  &quot;keypoolsize&quot;: 1000,</div><div class="line">  &quot;paytxfee&quot;: 0.00000000,</div><div class="line">  &quot;relayfee&quot;: 0.00001000,</div><div class="line">  &quot;warnings&quot;: &quot;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="初始化和测试区块链数据"><a href="#初始化和测试区块链数据" class="headerlink" title="初始化和测试区块链数据"></a>初始化和测试区块链数据</h2><h3 id="产生区块"><a href="#产生区块" class="headerlink" title="产生区块"></a>产生区块</h3><p>使用<code>make generate</code>命令产生一个区块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tester@84fdf4019179 ~/bitcoin-testnet-box$ make generate</div><div class="line">bitcoin-cli -datadir=1  generate 1</div><div class="line">[</div><div class="line">  &quot;793a86b807ac6595529bfcbd58118fe09706aa64e736fd9448f63cb7d38a9eb1&quot;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>使用<code>make generate BLOCKS=数量</code>命令批量产生区块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">tester@84fdf4019179 ~/bitcoin-testnet-box$ make generate BLOCKS=10</div><div class="line">bitcoin-cli -datadir=1  generate 10</div><div class="line">[</div><div class="line">  &quot;3a9d94273198bee2c448fcdeb2925a8e2685adc8f239f77fc64ce8b6f637b9aa&quot;,</div><div class="line">  &quot;3bd20765fa0162e1a17b2051c5b5711bfb271b25c88238f42a4351301d9e5ce6&quot;,</div><div class="line">  &quot;308e612999026677733ffd2954833e58d456e663e982037880f455ee5932c59c&quot;,</div><div class="line">  &quot;0b62ecc7990ac6770848655f10d4277d89df4ef1092fb7e25c0b2aa87a2bcbec&quot;,</div><div class="line">  &quot;5de9fbe62f7dc499568b41300610e3aa8b489a61375b3fa26717f65eab85392a&quot;,</div><div class="line">  &quot;14a000cae88c1bd881c06ba24a7a31364ff369578912e5a5abcf4023a0a28557&quot;,</div><div class="line">  &quot;414b9361debb64366cdf61b1acf5211e17b5f4f978ae5bfcad1aac916503e8a9&quot;,</div><div class="line">  &quot;75d1176835a12cf09cd51663fd7bd40e8e4fef15b392bf7e6ff94188398da041&quot;,</div><div class="line">  &quot;3d71ee9885fc9586013ce1c2954e197d726b25981c6977195e184fa90cdfa71d&quot;,</div><div class="line">  &quot;149dfcdc4cdfcbeeaf432bab90deca9a7b2b3935d359366ce652b071d6b72bb4&quot;</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/yzpbright/article/details/81004202" target="_blank" rel="external">https://blog.csdn.net/yzpbright/article/details/81004202</a></p>
<p><a href="https://www.codeooze.com/blockchain/bitcoind-running-in-docker/" target="_blank" rel="external">https://www.codeooze.com/blockchain/bitcoind-running-in-docker/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;搭建比特币测试网络&quot;&gt;&lt;a href=&quot;#搭建比特币测试网络&quot; class=&quot;headerlink&quot; title=&quot;搭建比特币测试网络&quot;&gt;&lt;/a&gt;搭建比特币测试网络&lt;/h2&gt;&lt;h3 id=&quot;下载比特币测试网络镜像&quot;&gt;&lt;a href=&quot;#下载比特币测试网络镜像&quot; c
    
    </summary>
    
      <category term="区块链" scheme="http://webfuse.cn/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Docker" scheme="http://webfuse.cn/tags/Docker/"/>
    
      <category term="区块链" scheme="http://webfuse.cn/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="比特币" scheme="http://webfuse.cn/tags/%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>WebMvcConfigurationSupport和WebMvcConfigurer</title>
    <link href="http://webfuse.cn/2019/01/20/WebMvcConfigurationSupport%E5%92%8CWebMvcConfigurer/"/>
    <id>http://webfuse.cn/2019/01/20/WebMvcConfigurationSupport和WebMvcConfigurer/</id>
    <published>2019-01-20T07:41:33.000Z</published>
    <updated>2019-04-10T05:43:32.269Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot帮我们做了很多的事情，但是有的时候会有自定义的Handler，Interceptor，ViewResolver，MessageConverter等，该怎么配置呢？为什么继承了WebMvcConfigurationSupport后有些配置会不生效呢？WebMvcConfigurer又是什么呢？</p>
<h2 id="WebMvcConfigurationSupport"><a href="#WebMvcConfigurationSupport" class="headerlink" title="WebMvcConfigurationSupport"></a>WebMvcConfigurationSupport</h2><p>我们继承WebMvcConfigurationSupport可以自定义SpringMvc的配置。</p>
<p>跟踪发现DelegatingWebMvcConfiguration类是WebMvcConfigurationSupport的一个实现类，DelegatingWebMvcConfiguration类的setConfigurers方法可以收集所有的WebMvcConfigurer实现类中的配置组合起来，组成一个超级配置（这些配置会覆盖掉默认的配置）。而@EnableWebMvc又引入了DelegatingWebMvcConfiguration。</p>
<p>所以，我们继承了WebMvcConfigurationSupport，而后使用@EnableWebMvc会覆盖掉原来的配置。</p>
<h2 id="WebMvcConfigurer"><a href="#WebMvcConfigurer" class="headerlink" title="WebMvcConfigurer"></a>WebMvcConfigurer</h2><p>WebMvcConfigurer配置类其实是Spring内部的一种配置方式，采用JavaBean的形式来代替传统的xml配置文件形式进行针对框架个性化定制。</p>
<p>在官方文档中有这么一段话：</p>
<p>&gt;</p>
<blockquote>
<p>If you want to keep Spring Boot MVC features and you want to add additional MVC configuration (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc.</p>
</blockquote>
<p>所以，如果我们想要在Auto-configuration的基础上配置自定义的interceptors, formatters, view controllers等功能话，我们可以实现WebMvcConfigurer，并用@Configuration注释。</p>
<p>WebMvcConfigurer的主要方法有：</p>
<ul>
<li>configurePathMatch：配置路由请求规则</li>
<li>configureContentNegotiation：内容协商配置</li>
<li>configureAsyncSupport</li>
<li>configureDefaultServletHandling：默认静态资源处理器</li>
<li>addFormatters：注册自定义转化器</li>
<li>addInterceptors：拦截器配置</li>
<li>addResourceHandlers：资源处理</li>
<li>addCorsMappings：CORS配置</li>
<li>addViewControllers：视图跳转控制器</li>
<li>configureViewResolvers：配置视图解析</li>
<li>addArgumentResolvers：添加自定义方法参数处理器</li>
<li>addReturnValueHandlers：添加自定义返回结果处理器</li>
<li>configureMessageConverters：配置消息转换器。重载会覆盖默认注册的HttpMessageConverter</li>
<li>extendMessageConverters：配置消息转换器。仅添加一个自定义的HttpMessageConverter.</li>
<li>configureHandlerExceptionResolvers：配置异常转换器</li>
<li>extendHandlerExceptionResolvers：添加异常转化器</li>
<li>getValidator</li>
<li>getMessageCodesResolver</li>
</ul>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ul>
<li>使用@EnableWebMvc注解 等于 扩展了WebMvcConfigurationSupport，但是没有重写任何方法</li>
<li>使用“extends WebMvcConfigurationSupport”方式（需要添加@EnableWebMvc），会屏蔽掉springBoot的@EnableAutoConfiguration中的设置</li>
<li>使用“implement WebMvcConfigurer”可以配置自定义的配置，同时也使用了@EnableAutoConfiguration中的设置</li>
<li>使用“implement WebMvcConfigurer + @EnableWebMvc”，会屏蔽掉springBoot的@EnableAutoConfiguration中的设置</li>
</ul>
<blockquote>
<p>这里的“@EnableAutoConfiguration中的设置”是指，读取 application.properties 或 application.yml 文件中的配置。</p>
</blockquote>
<p>所以，如果需要使用springBoot的@EnableAutoConfiguration中的设置，那么就只需要“implement WebMvcConfigurer”即可。如果，需要自己扩展同时不使用@EnableAutoConfiguration中的设置，可以选择另外的方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SpringBoot帮我们做了很多的事情，但是有的时候会有自定义的Handler，Interceptor，ViewResolver，MessageConverter等，该怎么配置呢？为什么继承了WebMvcConfigurationSupport后有些配置会不生效呢？Web
    
    </summary>
    
      <category term="Spring" scheme="http://webfuse.cn/categories/Spring/"/>
    
      <category term="Spring Boot" scheme="http://webfuse.cn/categories/Spring/Spring-Boot/"/>
    
    
      <category term="实战" scheme="http://webfuse.cn/tags/%E5%AE%9E%E6%88%98/"/>
    
      <category term="Spring Boot" scheme="http://webfuse.cn/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>基于Docker搭建以太坊私有网络</title>
    <link href="http://webfuse.cn/2018/12/18/%E5%9F%BA%E4%BA%8EDocker%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E6%9C%89%E7%BD%91%E7%BB%9C/"/>
    <id>http://webfuse.cn/2018/12/18/基于Docker搭建以太坊私有网络/</id>
    <published>2018-12-18T09:37:38.000Z</published>
    <updated>2018-12-18T09:40:57.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Running-in-Docker"><a href="#Running-in-Docker" class="headerlink" title="Running in Docker"></a>Running in Docker</h2><p>参考<a href="https://github.com/ethereum/go-ethereum/wiki/Running-in-Docker" target="_blank" rel="external">官方的Running in Docker</a>，具体的解释如下：</p>
<h3 id="运行节点"><a href="#运行节点" class="headerlink" title="运行节点"></a>运行节点</h3><p>拉取镜像：</p>
<p><code>docker pull ethereum/client-go</code></p>
<p>启动一个节点：</p>
<p><code>docker run -it -p 30303:30303 ethereum/client-go</code></p>
<p>启动一个节点并在8545上运行JSON-RPC接口：</p>
<p><code>docker run -it -p 8545:8545 -p 30303:30303 ethereum/client-go --rpc --rpcaddr &quot;0.0.0.0&quot;</code></p>
<p>注意：“0.0.0.0”参数会在8545接口上接收所有主机发送的请求，公共网络慎用！</p>
<p>使用javascript控制台进行交互操作，可运行下命令启动节点：</p>
<p><code>docker run -it -p 30303:30303 ethereum/client-go console</code></p>
<h3 id="指定区块链数据存储位置"><a href="#指定区块链数据存储位置" class="headerlink" title="指定区块链数据存储位置"></a>指定区块链数据存储位置</h3><p><code>docker run -it -p 30303:30303 -v /path/on/host:/root/.ethereum ethereum/client-go</code></p>
<p>-v参数指定了存储的路径。上面的命令会将/root/.ethereum挂载到本地路径/path/on/host下面。这样，容器启动以后，数据的实际存储路径就在/path/on/host下。</p>
<h3 id="使用启动的节点"><a href="#使用启动的节点" class="headerlink" title="使用启动的节点"></a>使用启动的节点</h3><p>运行上面的命令后，节点会自动去拉取主网的区块数据。我们可以连接到运行的容器中去执行各个操作。</p>
<p>运行<code>docker ps -a</code>查看容器实例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">~ docker ps -a</div><div class="line">CONTAINER ID        IMAGE                COMMAND             CREATED             STATUS                     PORTS               NAMES</div><div class="line">3791b8c1df57        ethereum/client-go   &quot;geth&quot;              19 minutes ago      Exited (0) 6 minutes ago                       eloquent_wiles</div></pre></td></tr></table></figure>
<p>执行命令<code>docker exec -it eloquent_wiles /bin/sh</code>，其中eloquent_wiles是容器的名字。这样，它就连接到了现在运行的容器了。</p>
<p>示例操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">/ # geth attach</div><div class="line">WARN [12-18|07:49:15.868] Sanitizing cache to Go&apos;s GC limits       provided=1024 updated=666</div><div class="line">Welcome to the Geth JavaScript console!</div><div class="line"></div><div class="line">instance: Geth/v1.8.19-unstable-9a000601/linux-amd64/go1.11.2</div><div class="line"> modules: admin:1.0 debug:1.0 eth:1.0 ethash:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0</div><div class="line"></div><div class="line">&gt; eth.syncing</div><div class="line">&#123;</div><div class="line">  currentBlock: 11504,</div><div class="line">  highestBlock: 6907887,</div><div class="line">  knownStates: 40307,</div><div class="line">  pulledStates: 17241,</div><div class="line">  startingBlock: 725</div><div class="line">&#125;</div><div class="line">&gt; eth.blockNumber</div><div class="line">0</div><div class="line">&gt; net.peerCount</div><div class="line">2</div><div class="line">&gt; eth.syncing</div><div class="line">&#123;</div><div class="line">  currentBlock: 27043,</div><div class="line">  highestBlock: 6907887,</div><div class="line">  knownStates: 61031,</div><div class="line">  pulledStates: 40281,</div><div class="line">  startingBlock: 725</div><div class="line">&#125;</div><div class="line">&gt; exit</div></pre></td></tr></table></figure>
<p>默认情况下，当节点启动时会在 datadir 指定的目录之下，生成一个名字为 geth.ipc 的文件，当程序关闭时此文件随之消失。可以使用–ipcpath参数修改掉路径。可以配合 attach 命令来进入与 geth 节点进行 js 交互的窗口。基本命令为：<code>/geth attach rpc:/path/on/host/geth.ipc</code></p>
<p>关于eth.blockNumber返回0的原因可以查看：</p>
<ul>
<li><a href="https://github.com/ethereum/go-ethereum/issues/14338" target="_blank" rel="external">eth.blockNumber is 0 while syncing #14338</a></li>
<li><a href="https://github.com/ethereum/go-ethereum/issues/16147" target="_blank" rel="external">eth.getBlock(“latest”).number is always 0 #16147</a></li>
</ul>
<h3 id="个性化Docker启动命令"><a href="#个性化Docker启动命令" class="headerlink" title="个性化Docker启动命令"></a>个性化Docker启动命令</h3><p>先来一条执行的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -it -d --name ethereum-node -p 8545:8545 -p 30303:30303 --network eth-network --ip 192.168.0.34 -v /path/on/host:/root/.ethereum ethereum/client-go --rinkeby --rpc --rpcaddr &quot;0.0.0.0&quot; --rpcapi &quot;admin,debug,eth,miner,net,personal,shh,txpool,web3,db&quot; --nodiscover --networkid 15 --fast --cache=512 --dev console 3&gt;&gt;eth.log&quot;</div></pre></td></tr></table></figure>
<h4 id="Docker参数"><a href="#Docker参数" class="headerlink" title="Docker参数"></a>Docker参数</h4><p>-it：交互式运行模式，-i 标准输入给容器，-t 分配一个虚拟终端</p>
<p>-d：以守护进程方式运行（后台）</p>
<p>-p：指定端口号</p>
<p>-P：随机分配端口号</p>
<p>–name：指定容器名称</p>
<p>–network：指定网络连接</p>
<p>–ip：分配ip地址</p>
<h4 id="Ethereum参数"><a href="#Ethereum参数" class="headerlink" title="Ethereum参数"></a>Ethereum参数</h4><p>–rinkeby：运行rinkeby网络，不设置默认为主网。</p>
<p>–rpc：启用HTTP-RPC服务</p>
<p>–rpcaddr：HTTP-RPC服务监听接口（默认：localhost）</p>
<p>–rpcapi：HTTP-RPC接口提供的api（默认：eth、net、web3）</p>
<p>–fast：快速同步模式启动Geth</p>
<p>–cache=512：内存容量分配</p>
<p>–dev：开发模式</p>
<p>–nodiscover：关闭节点自动发现，允许手动连接</p>
<p>–networkid：设置隔离网络（主网络id为1）</p>
<p>–verbosity 日志等级：0=silent, 1=error, 2=warn, 3=info, 4=debug, 5=detail (default: 3)</p>
<p>console：进入JavaScript控制台</p>
<p>更多的参数可以见下节。</p>
<h2 id="geth命令"><a href="#geth命令" class="headerlink" title="geth命令"></a>geth命令</h2><p>geth的命令可以在客户端运行<code>geth -help</code>或者在<a href="https://github.com/ethereum/go-ethereum/wiki/Command-Line-Options" target="_blank" rel="external">Command Line Options</a>中查看。</p>
<p>中文资料可以参考：<a href="https://learnblockchain.cn/2017/11/29/geth_cmd_options/" target="_blank" rel="external">以太坊客户端Geth命令用法-参数详解</a></p>
<h2 id="实战经验"><a href="#实战经验" class="headerlink" title="实战经验"></a>实战经验</h2><ul>
<li>关于数据目录。启动时一定要指定一个足够大硬盘的路径，不建议使用默认路径，此路径在后面使用的过程中会频繁用到，如果私钥文件没有单独存储，那么也将存储在此目录下。</li>
<li>keystore 目录下的文件一定要慎重保管，一旦丢失将永远丢失对应地址上的资产，它们和创建账户时设置的密码一一匹配。</li>
<li>在真实生产环境中 rpcapi 的 personal、admin 等级别较高的操作权限慎重开启，一旦使用不当会导致系统安全问题。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Running-in-Docker&quot;&gt;&lt;a href=&quot;#Running-in-Docker&quot; class=&quot;headerlink&quot; title=&quot;Running in Docker&quot;&gt;&lt;/a&gt;Running in Docker&lt;/h2&gt;&lt;p&gt;参考&lt;a href=
    
    </summary>
    
      <category term="区块链" scheme="http://webfuse.cn/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Docker" scheme="http://webfuse.cn/tags/Docker/"/>
    
      <category term="区块链" scheme="http://webfuse.cn/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="以太坊" scheme="http://webfuse.cn/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
  </entry>
  
  <entry>
    <title>《精通比特币》第二版</title>
    <link href="http://webfuse.cn/2018/12/14/%E3%80%8A%E7%B2%BE%E9%80%9A%E6%AF%94%E7%89%B9%E5%B8%81%E3%80%8B%E7%AC%AC%E4%BA%8C%E7%89%88/"/>
    <id>http://webfuse.cn/2018/12/14/《精通比特币》第二版/</id>
    <published>2018-12-14T06:33:06.000Z</published>
    <updated>2018-12-14T07:18:39.588Z</updated>
    
    <content type="html"><![CDATA[<p>为了方便查阅，将<a href="https://github.com/tianmingyun/MasterBitcoin2CN" target="_blank" rel="external">精通比特币</a>整理到这边。</p>
<p>目录如下：</p>
<ul>
<li><a href="/books/MasterBitcoin2CN/README.html">Introduction</a></li>
<li><a href="/books/MasterBitcoin2CN/cn-preface.html">中文版序言</a></li>
<li><a href="/books/MasterBitcoin2CN/trans-preface.html">译者序</a></li>
<li><a href="/books/MasterBitcoin2CN/preface.html">序言</a></li>
<li><a href="/books/MasterBitcoin2CN/second_edition_changes.html">第二版更新内容</a></li>
<li><a href="/books/MasterBitcoin2CN/glossary.html">词汇表</a></li>
<li><a href="/books/MasterBitcoin2CN/ch01.html">第一章介绍</a></li>
<li><a href="/books/MasterBitcoin2CN/ch02.html">第二章比特币原理</a></li>
<li><a href="/books/MasterBitcoin2CN/ch03.html">第三章比特币核心</a></li>
<li><a href="/books/MasterBitcoin2CN/ch04.html">第四章密钥和地址</a></li>
<li><a href="/books/MasterBitcoin2CN/ch05.html">第五章钱包</a></li>
<li><a href="/books/MasterBitcoin2CN/ch06.html">第六章交易</a></li>
<li><a href="/books/MasterBitcoin2CN/ch07.html">第七章高级交易和脚本</a></li>
<li><a href="/books/MasterBitcoin2CN/ch08.html">第八章比特币网络</a></li>
<li><a href="/books/MasterBitcoin2CN/ch09.html">第九章区块链</a></li>
<li><a href="/books/MasterBitcoin2CN/ch10.html">第十章挖矿和共识</a></li>
<li><a href="/books/MasterBitcoin2CN/ch11.html">第十一章比特币安全</a></li>
<li><a href="/books/MasterBitcoin2CN/ch12.html">第十二章比特币应用</a></li>
<li><a href="/books/MasterBitcoin2CN/appdx-bips.html">附录1：比特币改进提案（BIP）</a></li>
<li><a href="/books/MasterBitcoin2CN/appdx-bitcore.html">附录2：Bitcore</a></li>
<li><a href="/books/MasterBitcoin2CN/appdx-bx.html">附录3：Bitcoin Explorer（bx）命令</a></li>
<li><a href="/books/MasterBitcoin2CN/fappdx-pycoin.md">附录4：pycoin库、实用密钥程序ku和交易程序tx</a></li>
<li><a href="/books/MasterBitcoin2CN/appdx-scriptops.html">附录5 交易脚本的操作符、常量和符号</a></li>
<li><a href="/books/MasterBitcoin2CN/appdx-bitcoinwhitepaper.html">附录6 比特币白皮书</a></li>
<li><a href="/books/MasterBitcoin2CN/appdx-segwit.html">附录7 隔离见证</a></li>
<li><a href="/books/MasterBitcoin2CN/appdx-colored_coins.html">附录8 染色币</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了方便查阅，将&lt;a href=&quot;https://github.com/tianmingyun/MasterBitcoin2CN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;精通比特币&lt;/a&gt;整理到这边。&lt;/p&gt;
&lt;p&gt;目录如下：&lt;/p&gt;
&lt;ul&gt;
&lt;l
    
    </summary>
    
      <category term="区块链" scheme="http://webfuse.cn/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://webfuse.cn/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="BTC" scheme="http://webfuse.cn/tags/BTC/"/>
    
  </entry>
  
  <entry>
    <title>Docker基本命令</title>
    <link href="http://webfuse.cn/2018/11/14/Docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://webfuse.cn/2018/11/14/Docker基本命令/</id>
    <published>2018-11-14T01:47:06.000Z</published>
    <updated>2019-04-10T01:45:15.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker基本命令"><a href="#Docker基本命令" class="headerlink" title="Docker基本命令"></a>Docker基本命令</h1><p>Docker命令分为两大类：客户端命令和服务端命令。前者主要是操作接口，后者用来启动Docker daemon。</p>
<p>客户端命令基本格式：<code>docker [OPTIONS] COMMAND [arg...]</code></p>
<p>服务端命令基本格式：<code>docker daemon  [OPTIONS]</code></p>
<h2 id="Docker客户端命令帮助"><a href="#Docker客户端命令帮助" class="headerlink" title="Docker客户端命令帮助"></a>Docker客户端命令帮助</h2><p>执行 <code>docker --help</code>命令可以列出Docker的使用帮助，具体如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">Usage: docker [OPTIONS] COMMAND</div><div class="line"></div><div class="line">A self-sufficient runtime for containers</div><div class="line"></div><div class="line">Options:</div><div class="line">      --config string      设置docker客户端的配置文件地址</div><div class="line">  -D, --debug              开启调试模式，true|false</div><div class="line">  -H, --host list          需要连接的虚拟机的接口</div><div class="line">  -l, --log-level string   设置日志的等级</div><div class="line">      --tls                是否使用TLS协议（安全传输层协议），true | false</div><div class="line">      --tlscacert string   tls CA签名的可信证书文件路径 </div><div class="line">      --tlscert string     TLS可信证书文件路径 </div><div class="line">      --tlskey string      TLS秘钥文件路径 </div><div class="line">      --tlsverify          是否启用TLS校验 true|false</div><div class="line">  -v, --version            输出版本信息并退出</div><div class="line"></div><div class="line">管理命令:</div><div class="line">  checkpoint  管理检查点</div><div class="line">  config      管理集群中的配置信息</div><div class="line">  container   管理容器</div><div class="line">  image       管理镜像</div><div class="line">  network     管理容器的网络，包括查看、创建、删除、挂载、卸载等</div><div class="line">  node        管理Docker的集群结点，包括查看、更新、删除、提升/取消管理节点等</div><div class="line">  plugin      管理插件</div><div class="line">  secret      管理Docker敏感数据</div><div class="line">  service     管理Docker服务，包括创建、更新、删除等</div><div class="line">  stack       管理Docker堆栈</div><div class="line">  swarm       管理docker集群，包括创建、加入、退出、更新等</div><div class="line">  system      管理Docker</div><div class="line">  trust       管理Docker镜像的信任问题</div><div class="line">  volume      管理docker的数据容器，包括查看、创建、删除等</div><div class="line"></div><div class="line">命令:</div><div class="line">  attach      添加到一个正在运行的容器</div><div class="line">  build       通过dockerfile创建一个镜像</div><div class="line">  commit      从容器的变更中生成一个新镜像</div><div class="line">  cp          在容器和宿主文件系统中复制文件和文件夹</div><div class="line">  create      创建一个新的容器(只创建不允许)</div><div class="line">  deploy      部署新堆栈或更新现有堆栈</div><div class="line">  diff        在容器中进行文件对比</div><div class="line">  events      获取服务器的实时事件</div><div class="line">  exec        在容器中运行命令</div><div class="line">  export      将一个容器的文件以tar压缩包的形式导出</div><div class="line">  history     显示镜像的历史记录</div><div class="line">  images      显示镜像列表</div><div class="line">  import      从本地文件中导入镜像</div><div class="line">  info        显示系统层的信息</div><div class="line">  inspect     显示更底层的容器、镜像和任务信息</div><div class="line">  kill        杀掉一个或多个正在运行的容器</div><div class="line">  load        加载容器</div><div class="line">  login       登录到一个镜像仓库</div><div class="line">  logout      退出镜像仓库</div><div class="line">  logs        获取容器的日志</div><div class="line">  pause       停止容器的进程</div><div class="line">  port        显示出容器的所有端口</div><div class="line">  ps          显示容器列表</div><div class="line">  pull        从镜像仓库中拉取一个镜像</div><div class="line">  push        将一个镜像推送到一个镜像仓库</div><div class="line">  rename      重命名一个容器</div><div class="line">  restart     重新启动容器</div><div class="line">  rm          移除容器</div><div class="line">  rmi         移除镜像</div><div class="line">  run         在容器中运行命令</div><div class="line">  save        将容器保存为一个压缩包</div><div class="line">  search      在docker hub中搜索镜像</div><div class="line">  start       启动容器</div><div class="line">  stats       显示实时的容器状态</div><div class="line">  stop        停止容器</div><div class="line">  tag         给镜像加标签</div><div class="line">  top         显示容器正在运行的进程</div><div class="line">  unpause     恢复容器中的所有进程</div><div class="line">  update      更新容器中的配置</div><div class="line">  version     显示docker的版本信息</div><div class="line">  wait        阻塞进程一直到容器被停止</div><div class="line"></div><div class="line">Run &apos;docker COMMAND --help&apos; for more information on a command.</div></pre></td></tr></table></figure>
<p>参考：</p>
<p><a href="https://blog.csdn.net/itguangit/article/details/80246071" target="_blank" rel="external">docker常用命令总结</a></p>
<p><a href="https://segmentfault.com/a/1190000012063374" target="_blank" rel="external">Docker常用命令</a></p>
<p><a href="https://www.cnblogs.com/hcduguo/p/5150807.html" target="_blank" rel="external">Docker常用命令大全</a></p>
<p><a href="https://docker_practice.gitee.io/" target="_blank" rel="external">Docker从入门到实践</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker基本命令&quot;&gt;&lt;a href=&quot;#Docker基本命令&quot; class=&quot;headerlink&quot; title=&quot;Docker基本命令&quot;&gt;&lt;/a&gt;Docker基本命令&lt;/h1&gt;&lt;p&gt;Docker命令分为两大类：客户端命令和服务端命令。前者主要是操作接口，后者
    
    </summary>
    
      <category term="Docker" scheme="http://webfuse.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://webfuse.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>SpringFramework常用的注解说明</title>
    <link href="http://webfuse.cn/2018/09/28/SpringFramework%E5%B8%B8%E7%94%A8%E7%9A%84%E6%B3%A8%E8%A7%A3%E8%AF%B4%E6%98%8E/"/>
    <id>http://webfuse.cn/2018/09/28/SpringFramework常用的注解说明/</id>
    <published>2018-09-28T10:59:34.000Z</published>
    <updated>2019-04-10T05:43:24.055Z</updated>
    
    <content type="html"><![CDATA[<p>在进行SpringBoot开发的时候经常要用到注解，有的时候很容易忘记某个注解的意思，现将一些常用的注解说明归纳如下：</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Required</td>
<td>@Required注解检查。但它只检查属性是否已经设置而不会测试属性是否非空。@Required只能设置在setter方法上</td>
</tr>
<tr>
<td>@Autowired</td>
<td>Spring提供的注入工具【由Spring的依赖注入工具（BeanPostProcessor、BeanFactoryPostProcessor）自动注入】</td>
</tr>
<tr>
<td>@Qualifier</td>
<td>如果需要byName（byName就是通过id去标识）注入，增加@Qualifier注释。一般在候选Bean数目不为1时应该加@Qualifier注释。</td>
</tr>
<tr>
<td>@Configuration</td>
<td>在用于指定配置信息的类上加上 @Configuration 注解，以明确指出该类是 Bean 配置的信息源。</td>
</tr>
<tr>
<td>@ComponentScan</td>
<td>@ComponentScan告诉Spring 哪个packages 的用注解标识的类 会被spring自动扫描并且装入bean容器</td>
</tr>
<tr>
<td>@Bean</td>
<td>@Bean注解用于告诉方法，产生一个Bean对象，然后这个Bean对象交给Spring管理。产生这个Bean对象的方法Spring只会调用一次，随后这个Spring将会将这个Bean对象放在自己的IOC容器中。</td>
</tr>
<tr>
<td>@Lazy</td>
<td>如果我们想要 Spring 在启动的时候延迟加载 bean，即在调用某个 bean 的时候再去初始化，那么就可以使用 @Lazy 注解。</td>
</tr>
<tr>
<td>@Value</td>
<td>使用@Value注解，可以直接将属性值注入到beans中。</td>
</tr>
<tr>
<td>@Resource</td>
<td>@Resource用法与@Autowired 用法 用法相似，也是做依赖注入的，从容器中自动获取bean。</td>
</tr>
<tr>
<td>@Inject</td>
<td>这是jsr330中的规范，通过‘AutowiredAnnotationBeanPostProcessor’ 类实现的依赖注入。</td>
</tr>
<tr>
<td>@PropertySource</td>
<td>指定文件地址。提供了一种方便的、声明性的机制，用于向Spring的环境添加PropertySource。与@configuration类一起使用。</td>
</tr>
<tr>
<td>@PostConstruct</td>
<td>标注在方法上，该方法在构造函数执行完成之后执行。</td>
</tr>
<tr>
<td>@PreDestroy</td>
<td>标注在方法上，该方法在对象销毁之前执行。</td>
</tr>
<tr>
<td>@ActiveProfiles</td>
<td>用来声明活动的profile–@ActiveProfiles(“prod”(这个prod定义在配置类中))</td>
</tr>
<tr>
<td>@Profile</td>
<td>表示当一个或多个指定的文件是活动的时，一个组件是有资格注册的。使用@Profile注解类或者方法，达到在不同情况下选择实例化不同的Bean。@Profile(“dev”)表示为dev时实例化。</td>
</tr>
<tr>
<td>@Component</td>
<td>表示一个带注释的类是一个“组件”，成为Spring管理的Bean。当使用基于注解的配置和类路径扫描时，这些类被视为自动检测的候选对象。同时@Component还是一个元注解。</td>
</tr>
<tr>
<td>@Controller</td>
<td>组合注解（组合了@Component注解），应用在MVC层（控制层）,DispatcherServlet会自动扫描注解了此注解的类，然后将web请求映射到注解了@RequestMapping的方法上。</td>
</tr>
<tr>
<td>@Service</td>
<td>组合注解（组合了@Component注解），应用在service层（业务逻辑层）</td>
</tr>
<tr>
<td>@Reponsitory</td>
<td>组合注解（组合了@Component注解），应用在dao层（数据访问层）</td>
</tr>
<tr>
<td>@RestController</td>
<td>@RestController注解相当于@ResponseBody ＋ @Controller合在一起的作用。</td>
</tr>
<tr>
<td>@ResponseBody</td>
<td>将返回值放在response体内。返回的是数据而不是页面</td>
</tr>
<tr>
<td>@RequestBody</td>
<td>允许request的参数在request体中，而不是在直接链接在地址的后面。此注解放置在参数前。</td>
</tr>
<tr>
<td>@PathVariable</td>
<td>放置在参数前，用来接受路径参数。</td>
</tr>
<tr>
<td>@ModelAttribute</td>
<td>将键值对添加到全局，所有注解了@RequestMapping的方法可获得次键值对（就是在请求到达之前，往model里addAttribute一对name-value而已）。</td>
</tr>
<tr>
<td>@RequestAttribute</td>
<td>注解<code>@RequestAttribute</code>可以被用于访问由过滤器或拦截器创建的、预先存在的请求属性</td>
</tr>
<tr>
<td>@RequestHeader</td>
<td>获得指定的请求中的Header信息</td>
</tr>
<tr>
<td>@RequestParam</td>
<td>请求参数绑定</td>
</tr>
<tr>
<td>@ResponseStatus</td>
<td>带有@ResponseStatus注解的异常类会被ResponseStatusExceptionResolver 解析。可以实现自定义的一些异常,同时在页面上进行显示。</td>
</tr>
<tr>
<td>@CookieValue</td>
<td>用来获取Cookie中的值</td>
</tr>
<tr>
<td>@CrossOrigin</td>
<td>@CrossOrigin是用来处理跨域请求的注解</td>
</tr>
<tr>
<td>@RequestMapping</td>
<td>用来映射web请求（访问路径和参数），处理类和方法的。可以注解在类和方法上，注解在方法上的@RequestMapping路径会继承注解在类上的路径。同时支持Serlvet的request和response作为参数，也支持对request和response的媒体类型进行配置。其中有value(路径)，produces(定义返回的媒体类型和字符集)，method(指定请求方式)等属性。</td>
</tr>
<tr>
<td>@GetMapping</td>
<td>GET请求</td>
</tr>
<tr>
<td>@PostMapping</td>
<td>POST请求</td>
</tr>
<tr>
<td>@PutMapping</td>
<td>PUT请求</td>
</tr>
<tr>
<td>@PatchMapping</td>
<td>PATCH请求</td>
</tr>
<tr>
<td>@DeleteMapping</td>
<td>DELETE请求</td>
</tr>
<tr>
<td>@ExceptionHandler</td>
<td>用在方法上定义全局处理，通过他的value属性可以过滤拦截的条件：@ExceptionHandler(value=Exception.class)–表示拦截所有的Exception。</td>
</tr>
<tr>
<td>@ControllerAdvice</td>
<td>用在类上，声明一个控制器建言，它也组合了@Component注解，会自动注册为Spring的Bean</td>
</tr>
<tr>
<td>@InitBinder</td>
<td>通过@InitBinder注解定制WebDataBinder（用在方法上，方法有一个WebDataBinder作为参数，用WebDataBinder在方法内定制数据绑定，例如可以忽略request传过来的参数Id等）。</td>
</tr>
<tr>
<td>@SessionAttribute</td>
<td>@SessionAttribute作用于处理器类上，用于在多个请求之间传递参数，类似于Session的Attribute，但不完全一样，一般来说@SessionAttribute设置的参数只用于暂时的传递，而不是长期的保存，长期保存的数据还是要放到Session中。</td>
</tr>
<tr>
<td>@SessionAttributes</td>
<td>@sessionattributes注解应用到Controller上面，可以将Model中的属性同步到session当中。</td>
</tr>
<tr>
<td>@Aspect</td>
<td>声明一个切面（就是说这是一个额外功能）</td>
</tr>
<tr>
<td>@After</td>
<td>后置建言（advice），在原方法前执行。</td>
</tr>
<tr>
<td>@Before</td>
<td>前置建言（advice），在原方法后执行。</td>
</tr>
<tr>
<td>@Around</td>
<td>环绕建言（advice），在原方法执行前执行，在原方法执行后再执行（@Around可以实现其他两种advice）</td>
</tr>
<tr>
<td>@PointCut</td>
<td>声明切点，即定义拦截规则，确定有哪些方法会被切入</td>
</tr>
<tr>
<td>@EnableAspectJAutoProxy</td>
<td>开启Spring对AspectJ的支持</td>
</tr>
<tr>
<td>@SpingBootApplication</td>
<td>SpringBoot的核心注解，主要目的是开启自动配置。它也是一个组合注解，主要组合了@Configurer，@EnableAutoConfiguration（核心）和@ComponentScan。可以通过@SpringBootApplication(exclude={想要关闭的自动配置的类名.class})来关闭特定的自动配置。</td>
</tr>
<tr>
<td>@Async</td>
<td>注解在方法上标示这是一个异步方法，在类上标示这个类所有的方法都是异步方法。</td>
</tr>
<tr>
<td>@EnableAsync</td>
<td>开启异步任务支持。注解在配置类上。</td>
</tr>
<tr>
<td>@Scheduled</td>
<td>注解在方法上，声明该方法是计划任务。支持多种类型的计划任务：cron,fixDelay,fixRate</td>
</tr>
<tr>
<td>@EnableScheduling</td>
<td>注解在配置类上，开启对计划任务的支持。</td>
</tr>
<tr>
<td>@EnableAutoConfiguration</td>
<td>此注释自动载入应用程序所需的所有Bean——这依赖于Spring Boot在类路径中的查找。该注解组合了@Import注解，@Import注解导入了EnableAutoCofigurationImportSelector类，它使用SpringFactoriesLoader.loaderFactoryNames方法来扫描具有META-INF/spring.factories文件的jar包。而spring.factories里声明了有哪些自动配置。</td>
</tr>
<tr>
<td>@WebAppConfiguration</td>
<td>一般用在测试上，注解在类上，用来声明加载的ApplicationContext是一个WebApplicationContext。他的属性指定的是Web资源的位置，默认为src/main/webapp,我们可以修改为：@WebAppConfiguration(“src/main/resources”)。</td>
</tr>
<tr>
<td>@Cacheable</td>
<td>声明数据缓存</td>
</tr>
<tr>
<td>@EnableWebMvc</td>
<td>用在配置类上，开启SpringMvc的Mvc的一些默认配置：如ViewResolver，MessageConverter等。同时在自己定制SpringMvc的相关配置时需要做到两点：1.配置类继承WebMvcConfigurerAdapter类<br>2.就是必须使用这个@EnableWebMvc注解。</td>
</tr>
<tr>
<td>@BeforeTransaction</td>
<td>@BeforeTransaction在事务之前执行</td>
</tr>
<tr>
<td>@AfterTransaction</td>
<td>@AfterTransaction在事务之后执行</td>
</tr>
<tr>
<td>@Transactional</td>
<td>声明事务（一般默认配置即可满足要求，当然也可以自定义）</td>
</tr>
<tr>
<td>@ImportResource</td>
<td>虽然Spring提倡零配置，但是还是提供了对xml文件的支持，这个注解就是用来加载xml配置的。</td>
</tr>
<tr>
<td>@ConfigurationProperties</td>
<td>将properties属性与一个Bean及其属性相关联，从而实现类型安全的配置。</td>
</tr>
<tr>
<td>@Conditional</td>
<td>根据满足某一特定条件创建特定的Bean</td>
</tr>
<tr>
<td>@ConditionalOnBean</td>
<td>条件注解。当容器里有指定Bean的条件下。</td>
</tr>
<tr>
<td>@ConditionalOnClass</td>
<td>条件注解。当类路径下有指定的类的条件下。</td>
</tr>
<tr>
<td>@ConditionalOnExpression</td>
<td>条件注解。基于SpEL表达式作为判断条件。</td>
</tr>
<tr>
<td>@ConditionalOnJava</td>
<td>条件注解。基于JVM版本作为判断条件。</td>
</tr>
<tr>
<td>@ConditionalOnJndi</td>
<td>条件注解。在JNDI存在的条件下查找指定的位置。</td>
</tr>
<tr>
<td>@ConditionalOnMissingBean</td>
<td>条件注解。当容器里没有指定Bean的情况下。</td>
</tr>
<tr>
<td>@ConditionalOnMissingClass</td>
<td>条件注解。当类路径下没有指定的类的情况下。</td>
</tr>
<tr>
<td>@ConditionalOnNotWebApplication</td>
<td>条件注解。当前项目不是web项目的条件下。</td>
</tr>
<tr>
<td>@ConditionalOnResource</td>
<td>条件注解。类路径是否有指定的值。</td>
</tr>
<tr>
<td>@ConditionalOnSingleCandidate</td>
<td>条件注解。当指定Bean在容器中只有一个，后者虽然有多个但是指定首选的Bean。</td>
</tr>
<tr>
<td>@ConditionalOnWebApplication</td>
<td>条件注解。当前项目是web项目的情况下。</td>
</tr>
<tr>
<td>@EnableConfigurationProperties</td>
<td>注解在类上，声明开启属性注入，使用@Autowired注入。</td>
</tr>
<tr>
<td>@AutoConfigureAfter</td>
<td>在指定的自动配置类之后再配置。</td>
</tr>
<tr>
<td>@AutoConfigureBefore</td>
<td>在指定的自动配置类之前进行配置。</td>
</tr>
<tr>
<td>@RunWith</td>
<td>这个是Junit的注解，springboot集成了junit。一般在测试类里使用。</td>
</tr>
<tr>
<td>@ContextConfiguration</td>
<td>用来加载配置ApplicationContext，其中classes属性用来加载配置</td>
</tr>
</tbody>
</table>
<hr>
<p>参考：</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_37490221/article/details/78406810" target="_blank" rel="external">Spring 注解大全与详解</a></li>
<li><a href="https://skyao.gitbooks.io/learning-spring-boot/content/" target="_blank" rel="external">Spring Boot学习笔记</a></li>
<li><a href="https://springframework.guru/spring-framework-annotations/" target="_blank" rel="external">SPRING FRAMEWORK ANNOTATIONS</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在进行SpringBoot开发的时候经常要用到注解，有的时候很容易忘记某个注解的意思，现将一些常用的注解说明归纳如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;注解&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;

    
    </summary>
    
      <category term="Spring" scheme="http://webfuse.cn/categories/Spring/"/>
    
      <category term="Spring Boot" scheme="http://webfuse.cn/categories/Spring/Spring-Boot/"/>
    
    
      <category term="Spring" scheme="http://webfuse.cn/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://webfuse.cn/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>区块链技术概览</title>
    <link href="http://webfuse.cn/2018/09/03/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E6%A6%82%E8%A7%88/"/>
    <id>http://webfuse.cn/2018/09/03/区块链技术概览/</id>
    <published>2018-09-03T15:19:11.000Z</published>
    <updated>2018-09-03T15:28:55.804Z</updated>
    
    <content type="html"><![CDATA[<p>本文摘自《白话区块链》</p>
<h2 id="区块链技术理念"><a href="#区块链技术理念" class="headerlink" title="区块链技术理念"></a>区块链技术理念</h2><p><strong>区块链的本质就是一种记账方法，是通过“区块链客户端”来记账。运行中的客户端软件称为“节点”。</strong></p>
<p>在区块链系统中，所有的节点都是可以互相通信的，这个功能称为“<strong>网络路由</strong>”</p>
<p><strong>共识算法</strong>就是一种大家都遵守的筛选方案。在选出一个节点后，则一段时间内的账务数据都以这个节点记录为准，这个节点记录后会广播出去，告诉其他的节点，其他节点只需要通过网络来接收新的数据，接收后各自根据自己现有的账本验证一下能不能接得上，有没有不匹配和不规范的，如果都符合要求，就存储到自己的账本中。</p>
<p>有些区块链系统在记账环节会设计出一种带有竞争的机制，让各个节点去抢，谁抢到这个机会谁就能获得打包数据的权利并且同时获得这笔奖励。这个过程称为“<strong>挖矿</strong>”。</p>
<p>在区块链系统中，识别不同的使用者是通过一种密码算法来实现的。这个算法分为公钥和私钥，公钥可以给别人，私钥自己保管。公钥是用来做身份识别的，从公钥可以算出地址来代表一个用户。用公钥加密的数据必须用对应的私钥才能解密，用私钥加密（通常称为“签名”）的数据必须用对应的公钥才能解密。</p>
<h2 id="区块链技术栈"><a href="#区块链技术栈" class="headerlink" title="区块链技术栈"></a>区块链技术栈</h2><p>区块链是将产生的数据按照一定的时间间隔，分成一个个的数据块记录，然后再根据数据块大的先后关系串联起来。</p>
<p><strong>区块链的基本技术：区块链账本、共识机制、密码算法、网络路由、脚本系统。</strong></p>
<p>区块链账本：表示一种特有的数据记录格式。每一个数据块之间通过某个标志连接起来，从而形成一条链。区块数据在逻辑上分成了区块头和区块体。每个区块头中通过梅克尔根关联了区块体众多的交易事务，每个区块之间通过区块头哈希值串联起来。</p>
<p>共识算法：在区块链系统中，每个节点必须要做的事情就是让自己的账本跟其他节点的账本保持一致。共识算法就是一个规则，每个节点都按照这个规则去确认各自的数据。共识算法其实也是一种筛选方案，比如PoW（Proof  of Work，工作量证明）、PoS（Proof of Stake，权益证明）、DPoS（Delegate Proof of Stake，委托权益证明）、PBFT（Practical Byzantine Fault Tolerance，实用拜占庭容错算法）等。</p>
<p>密码算法：主要用到，哈希算法、梅克尔树。</p>
<p>脚本系统：脚本系统可以使区块链中实现各种各样的业务功能。</p>
<p>网络路由：区块链系统是一个分布式系统，各个节点之间的通信靠的就是网络路由。</p>
<h2 id="区块链分类和架构"><a href="#区块链分类和架构" class="headerlink" title="区块链分类和架构"></a>区块链分类和架构</h2><p>区块链系统实际上是一个维护公共数据账本的系统，一切技术单元的设计都是为了更好地维护这个公共数据账本。通过共识算法达成节点的账本数据一致；通过密码算法确保账本数据的不可篡改性以及数据发送的安全性；通过脚本系统扩展账本数据的表达范畴。区块链系统实际上就是一种特别设计的数据库系统或者说分布式数据库系统。</p>
<h3 id="区块链1-0架构"><a href="#区块链1-0架构" class="headerlink" title="区块链1.0架构"></a>区块链1.0架构</h3><p>这个阶段的区块链系统主要是用来实现数字货币的。</p>
<img src="/2018/09/03/区块链技术概览/blockchain-1.0.png" alt="blockchain-1.0.png" title="">
<p>矿工要对区块数据进行打包；矿工能获得系统的奖励。<br>钱包工具提供给用户管理自己账户地址以及余额。<br>浏览器用来查看当前区块链网络中发送的数据情况（比如，最新区块高度、内存池的交易数等）<br>RPC客户端和命令行接口用来访问核心节点</p>
<h3 id="区块链2-0架构"><a href="#区块链2-0架构" class="headerlink" title="区块链2.0架构"></a>区块链2.0架构</h3><p>区块链2.0的代表产品是以太坊。最大的区别是支持智能合约，用时拥有以太坊虚拟机</p>
<img src="/2018/09/03/区块链技术概览/blockchain-2.0.png" alt="blockchain-2.0.png" title="">
<h3 id="区块链3-0架构"><a href="#区块链3-0架构" class="headerlink" title="区块链3.0架构"></a>区块链3.0架构</h3><p>区块链3.0是将区块链技术作为一种泛解决方案，可以面向行业应用。</p>
<img src="/2018/09/03/区块链技术概览/blockchain-3.0.png" alt="blockchain-3.0.png" title="">
<p>区块链3.0可以看做是一套框架，通过对框架的配置和二次开发可以适应各行业的需求。“可插拔共识”意思就是共识机制是不固定的，可配置的。</p>
<h2 id="区块链分类"><a href="#区块链分类" class="headerlink" title="区块链分类"></a>区块链分类</h2><h3 id="根据网络范围分类："><a href="#根据网络范围分类：" class="headerlink" title="根据网络范围分类："></a>根据网络范围分类：</h3><ul>
<li>公有链：完全对外开放的，任何人都可以使用，没有权限的设定，完全公开透明。没有第三方管理、依靠一组事先约定好的规则。这个规则确保每个参与者在不信任的网络环境中能够发起可靠的交易事务。</li>
<li>私有链：不对外开放，仅仅在组织内部使用。</li>
<li>联盟链：网络范围介于公有链和私有链之间。使用在多个成员角色的环境中，如银行之间的支付结算、企业之间的物流等。</li>
</ul>
<h3 id="根据部署环境分类："><a href="#根据部署环境分类：" class="headerlink" title="根据部署环境分类："></a>根据部署环境分类：</h3><ul>
<li>主链：部署在生产环境的真正的区块链系统。</li>
<li>测试链：开发者为了方便大家学习使用而提供的测试用途的区块链网络。</li>
</ul>
<h3 id="根据对接类型分类："><a href="#根据对接类型分类：" class="headerlink" title="根据对接类型分类："></a>根据对接类型分类：</h3><ul>
<li>单链：能够单独运行的区块链系统都称为“单链”。比如：比特币主链、测试链，以太坊主链、测试链。</li>
<li>侧链：属于一种区块链的跨链技术。</li>
<li>互联链：所有的区块链都互联起来（只能说是如果可以的话）</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文摘自《白话区块链》&lt;/p&gt;
&lt;h2 id=&quot;区块链技术理念&quot;&gt;&lt;a href=&quot;#区块链技术理念&quot; class=&quot;headerlink&quot; title=&quot;区块链技术理念&quot;&gt;&lt;/a&gt;区块链技术理念&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;区块链的本质就是一种记账方法，是通过“区块链客
    
    </summary>
    
      <category term="区块链" scheme="http://webfuse.cn/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://webfuse.cn/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>以太坊学习摘要</title>
    <link href="http://webfuse.cn/2018/08/24/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/"/>
    <id>http://webfuse.cn/2018/08/24/以太坊学习摘要/</id>
    <published>2018-08-24T14:05:11.000Z</published>
    <updated>2018-08-24T16:26:56.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="以太坊"><a href="#以太坊" class="headerlink" title="以太坊"></a>以太坊</h2><p>以太坊（Ethereum）是一个建立在区块链技术之上， 去中心化应用平台。它允许任何人在平台中建立和使用通过区块链技术运行的去中心化应用。与比特币相比，以太坊属于区块链2.0的范畴。</p>
<p>从平台角度来看，以太坊类似于苹果或者安卓的应用商店；从技术角度来说，以太坊类似于一个区块链操作系统。</p>
<p>下图是以太坊的组成：</p>
<img src="/2018/08/24/以太坊学习摘要/以太坊组成.png" alt="以太坊组成.png" title="">
<p>所以，可以理解为：“以太坊=区块链+智能合约”。开发者在以太坊上可以开发任意的应用，实现任意的智能合约。以太坊的虚拟机和智能合约扩展了外部应用程序在区块链技术上的应用。另外，以太坊中的智能合约是运行在虚拟机（也就是EVM，Ethereum Virtual Machine，以太坊虚拟机）上的。</p>
<h2 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h2><p>智能合约就是以太坊上的程序，它是代码和数据（状态）的集合。所以，不管什么样功能的合约，站在技术的角度上来讲，就是通过执行一组程序改变了一些值。</p>
<p>我们不但可以实现数字货币，还可以实现众筹合约、担保合约、融资租赁合约、期货合约以及各种金融与非金融的订单合约。</p>
<p>在以太坊中，每个合约都有一个唯一的地址来标识它自己（由创建者的哈希地址和曾经发送过的交易的数量推算出来）。客户端可以与这个地址进行交互，可以发送ether，调用函数，查询当前的状态等。</p>
<p>有三种常见的智能合约语言，这些语言可以被编译成智能合约运行在以太坊虚拟矿机上。它们是：</p>
<ul>
<li>Solidity：和Javascript语言类似。这是目前最受欢迎的和功能丰富的智能合约脚本语言。</li>
<li>Serpent：和Python语言类似，在以太坊历史的早期受欢迎。</li>
<li>LLL (Lisp Like Language)：和Lisp类似，只有在早期使用。它大概是最难用的。</li>
</ul>
<h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p>状态可以理解为以太坊中的某些内容发生变化。</p>
<p>对于区块链账本，这里的变化可以指一笔转账，也可以是合约的某个规则被激活等，总之就是数据动了，以太坊中将变化的过程称为<strong>状态转变函数</strong></p>
<p>在以太坊系统中，状态是由被称为“账户”的对象和在两个账户之间转移价值和信息的状态转换构成的。</p>
<blockquote>
<p>以太坊的每个区块头中都包含了指向三棵树（状态树、交易树、数据树）的指针。</p>
</blockquote>
<h2 id="账户"><a href="#账户" class="headerlink" title="账户"></a>账户</h2><p>以太坊具有账户的概念。在以太坊中有两类的账户：外部账户 和 合约账户。</p>
<h3 id="外部账户"><a href="#外部账户" class="headerlink" title="外部账户"></a>外部账户</h3><p>外部账户（EOA，Externally Owned Account）,它就是一个一般账户的概念。外部账户是由一对秘钥定义的，一个私钥一个公钥，公钥的后20位作为地址。</p>
<p>外部账户没有关联任何的代码。</p>
<h3 id="合约账户"><a href="#合约账户" class="headerlink" title="合约账户"></a>合约账户</h3><p>智能合约的部署是指把合约字节码发布到区块链上，并使用一个特定的地址来标示这个合约，这个地址称为合约账户。合约账户是可编程的，可以执行图灵完备的计算任务，合约账户之间可以传递消息。</p>
<h3 id="区别和联系"><a href="#区别和联系" class="headerlink" title="区别和联系"></a>区别和联系</h3><p>合约账户的地址是通过合约创建者的地址和该地址发出过的交易数量计算得到的。</p>
<p>一个外部账户可以通过创建和用自己的私钥来对交易进行签名，来发送消息给另一个外部账户或合约账户。</p>
<p>在两个外部账户之间传送消息是价值转移的过程。但从外部账户到合约账户的消息会激活合约账户的代码，允许它执行各种动作（比如转移代币，写入内部存储，挖出一个新代币，执行一些运算，创建一个新的合约等等）。</p>
<p>只有当外部账户发出指令时，合同账户才会执行相应的操作。</p>
<h3 id="账户的结构"><a href="#账户的结构" class="headerlink" title="账户的结构"></a>账户的结构</h3><p>以太坊中的账户包含以下4个部分：</p>
<ul>
<li>随机数（Nonce）。用于确定每笔交易智能被处理一次的计数器，也就是每个账户的交易计数，用于防止重放攻击。当某个账户发送一笔交易时，根据已生成的交易数来累加这个数字。</li>
<li>账户目前的以太币余额（Balance）。</li>
<li>账户的存储（Root），它是一个哈希值，指向的是一棵patricia trie（帕夏尔前缀树）。默认为空</li>
<li>账户的合约代码（CodeHash），只有合约账户才有，否则为空。</li>
</ul>
<h2 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h2><p>以太坊中的交易就是状态的转换过程。</p>
<p>交易在以太坊中是在签名的数据包，这个数据包中存储了从外部账户发送的消息。所谓的交易就是一个消息，这个消息被发送者签名了。</p>
<h3 id="交易类型："><a href="#交易类型：" class="headerlink" title="交易类型："></a>交易类型：</h3><ul>
<li>转账交易。也就是从一个账户往另一个账户转账发以太币。</li>
<li>合约创建交易。也就是创建一个合约，因为创建合约也要消耗以太坊。</li>
<li>合约执行交易。在以太坊中，执行合约也算一种交易。</li>
</ul>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul>
<li>AccountNonce：表明交易的发送者已经发送过的交易数，与账户中定义的随机数对应。</li>
<li>Price和GasLimit：用来抵抗拒绝服务攻击。就是为了让交易的执行带上成本，每进行一次交易都要支付一定的手续费，GasLimit是交易执行所需的计算量，Price是单价，两者的乘积就是手续费。如果交易在执行的过程中实际所需的消耗超出了Gas限制就会出错回滚，如果存在多余的Gas就会退还多余部分。</li>
<li>Recipient：接收方的地址。</li>
<li>Amount：发送的以太坊金额，单位wei。</li>
<li>Payload：交易携带的数据，根据不同的交易类型有不同的用法。</li>
<li>V、R、S：交易的签名数字。</li>
</ul>
<blockquote>
<p>以太坊的区块头中有交易信息。</p>
</blockquote>
<h3 id="计量单位"><a href="#计量单位" class="headerlink" title="计量单位"></a>计量单位</h3><p>最小单位是wei。1 ether = 1000 000 000 000 000 000 wei。</p>
<blockquote>
<p>kwei = 1000wei</p>
<p>mwei = 1000kwei</p>
<p>gwei = 1000mwei</p>
<p>szabo = 1000gwei</p>
<p>finney = 1000szabo</p>
<p>ether = 1000finney</p>
</blockquote>
<h2 id="收据"><a href="#收据" class="headerlink" title="收据"></a>收据</h2><p>在以太坊中，收据是指每条交易执行所影响的数据条，在以太坊的区块头中存储了收据树的根哈希值。</p>
<p>收据实际上是一个数据的统计记录，记录了执行后的特征数据。</p>
<p>数据结构如下：</p>
<ul>
<li>PostState： 状态树的根哈希。通过这个字段使得收据可以直接访问都状态数据。</li>
<li>CumulativeGasUsed：累计的Gas消耗，包含关联的本条交易以及之前的交易所消耗的Gas之和，或者说是指所在区域的Gas消耗之和。</li>
<li>TxHash：交易事务的哈希值。</li>
<li>ContractAddress：合约地址，如果是普通的转账交易则为空。</li>
<li>GasUsed：本条交易消耗的Gas。</li>
</ul>
<h2 id="Gas"><a href="#Gas" class="headerlink" title="Gas"></a>Gas</h2><p>在以太坊中Gas可以理解为在以太坊平台上执行程序需要付出的成本或者手续费。</p>
<p>Gas是通过以太坊中合约的执行计算量来决定的，这个计算量可以简单理解为是算力的消耗，执行一次SHA3哈希计算会消耗20个Gas，执行一次普通的转账交易就要消耗21000个Gas。</p>
<p>以太币总额 = 消耗的Gas ✖️ Gas单价。</p>
<h2 id="以太坊客户端"><a href="#以太坊客户端" class="headerlink" title="以太坊客户端"></a>以太坊客户端</h2><p>以太坊客户端，其实我们可以把它理解为一个开发者工具，它提供账户管理、挖矿、转账、智能合约的部署和执行等等功能。</p>
<p>go-ethereum是官方的Go语言客户端。可用于挖矿、组件私有链、管理账号、部署智能合约等。它提供了一个交互式命令控制台，通过命令控制台中包含了以太坊的各种功能（API）。</p>
<p>除go-ethereum外，官方还提供了cpp-ethereum，基于C++写的。</p>
<h2 id="以太坊网络"><a href="#以太坊网络" class="headerlink" title="以太坊网络"></a>以太坊网络</h2><p>我们可以把以太网络分为3种：主网、测试网络和私有网络。</p>
<ul>
<li>生产环境网络（主网）: 以太坊的生产网络顾名思义，也就是产生真正有价值的 的以太币的网络。</li>
<li>测试网络: 以太坊的测试网络也是官方提供的，顾名思义就是专供用户来开发、调试和测试的。上面的合约执行不消耗真实的以太币。官方提供的为：Rinkeby</li>
<li>私有网络：以太坊的私有网络，顾名思义就是由用户自己创建的私有网络。</li>
</ul>
<h2 id="以太币"><a href="#以太币" class="headerlink" title="以太币"></a>以太币</h2><p>以太币每年的产量则是固定的。</p>
<p>以太币的数量以这种形式存在：Pre-mine（矿前） + Block rewards（区块奖励） + Uncle rewards（叔块奖励） + Uncle referencing rewards（叔块引用奖励）</p>
<ul>
<li>矿前：2014年7月/8月间，为众筹大约发行了7200万以太币。这些币有的时候被称之为“矿前”。众筹阶段之后，以太币每年的产量被限制在7200万以太币的25%（每年以太币的矿产量，不高于1800万，除了一次性为crowdsale而发行的7200万以太币）</li>
<li>区块奖励：每产生一个新区块就会产生5个新以太币。每年有225万个区块被挖出来，每个区块5个以太币，也就是每年会产出1130万个以太币。</li>
<li>叔块奖励：有些区块被挖得稍晚一些，因此不能称为主区块链的组成部分，以太币称它们为“ uncles”，并且在之后的区块中，可以引用它们。如果uncles在之后的区块链中作为叔块被引用，每个叔块会为挖矿者产出大约4.375个以太币（5个以太币奖励的8分之7）.这被称之为叔块奖励。</li>
<li>叔块引用奖励：矿工每引用一个叔块，就得到了大约0.15个以太币（最多引用两个叔块）。</li>
</ul>
<hr>
<p>引用：</p>
<ul>
<li>《白话区块链》</li>
<li><a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="external">以太坊白皮书</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/24012669" target="_blank" rel="external">一个基础的以太坊介绍</a></li>
<li><a href="https://learnblockchain.cn/2017/11/20/whatiseth/" target="_blank" rel="external">以太坊是什么 - 以太坊开发入门指南</a></li>
<li><a href="http://me.tryblockchain.org/getting-up-to-speed-on-ethereum.html" target="_blank" rel="external">以太坊开发入门，完整入门篇</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;以太坊&quot;&gt;&lt;a href=&quot;#以太坊&quot; class=&quot;headerlink&quot; title=&quot;以太坊&quot;&gt;&lt;/a&gt;以太坊&lt;/h2&gt;&lt;p&gt;以太坊（Ethereum）是一个建立在区块链技术之上， 去中心化应用平台。它允许任何人在平台中建立和使用通过区块链技术运行的去中心化
    
    </summary>
    
      <category term="区块链" scheme="http://webfuse.cn/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://webfuse.cn/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="以太坊" scheme="http://webfuse.cn/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
  </entry>
  
  <entry>
    <title>离职前夕的随想</title>
    <link href="http://webfuse.cn/2018/07/25/%E7%A6%BB%E8%81%8C%E5%89%8D%E5%A4%95%E7%9A%84%E9%9A%8F%E6%83%B3/"/>
    <id>http://webfuse.cn/2018/07/25/离职前夕的随想/</id>
    <published>2018-07-24T16:03:21.000Z</published>
    <updated>2018-07-28T03:19:46.941Z</updated>
    
    <content type="html"><![CDATA[<p>去年，离开ND后的第一天，在去临海的动车上，写了《十年》一文。没想到的是今年，在离开德诺的前一天晚上，又写下了一篇类似的文章。</p>
<p>离开德诺不舍是真，但是浓浓的不甘也是真。故事终究是有聚有散，事情也无法分辨谁对谁错，无非就是那一时刻的选择而已。</p>
<p>最近在看《少有人走的路》，也就刚看了第一章，也许明天开始又会重新从头开始看，不为别的，只是觉得第一章就已经很和我口味了。一年来，特别是今年以来的一些事情让我很无语，其实，现在想来也是自己的问题罢了。“我的时间是我的责任，是我，只有我，能决定怎么安排和利用我的时间”，同理，他人的时间应该也是他人负责，旁人无法左右。</p>
<p>最后，引用“自律是解决人生问题最主要的工具，也是消除人生痛苦最重要的方法。”这句来做个结束吧！希望，新的开始是自己想要的开始，新的征程是充满激情的征程~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年，离开ND后的第一天，在去临海的动车上，写了《十年》一文。没想到的是今年，在离开德诺的前一天晚上，又写下了一篇类似的文章。&lt;/p&gt;
&lt;p&gt;离开德诺不舍是真，但是浓浓的不甘也是真。故事终究是有聚有散，事情也无法分辨谁对谁错，无非就是那一时刻的选择而已。&lt;/p&gt;
&lt;p&gt;最近
    
    </summary>
    
      <category term="未分类" scheme="http://webfuse.cn/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="生活" scheme="http://webfuse.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="杂念" scheme="http://webfuse.cn/tags/%E6%9D%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>Java面试手册</title>
    <link href="http://webfuse.cn/2018/07/22/Java%E9%9D%A2%E8%AF%95%E6%89%8B%E5%86%8C/"/>
    <id>http://webfuse.cn/2018/07/22/Java面试手册/</id>
    <published>2018-07-22T00:19:45.000Z</published>
    <updated>2018-07-28T03:19:46.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java面试手册"><a href="#Java面试手册" class="headerlink" title="Java面试手册"></a>Java面试手册</h1><p>《Java面试手册》整理了从业到现在看到的、经历过的一些Java面试题。</p>
<p>主要发布在我的GitHUb上，见：<a href="https://github.com/guanzhenxing/java_interview_manual" target="_blank" rel="external">Java面试手册</a></p>
<p>这些面试题的主要来源是一些网站还有github上的内容，由于平常在收藏到“印象笔记”中的时候没有保留来源出处，如果有介意版权的可以联系我。</p>
<p>主要分为以下部分：</p>
<ul>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/java-basic/index.md" target="_blank" rel="external">Java基础</a><ul>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/java-basic/oop.md" target="_blank" rel="external">面向对象</a></li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/java-basic/basic.md" target="_blank" rel="external">基础</a></li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/java-basic/collections.md" target="_blank" rel="external">集合</a></li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/java-basic/multithread.md" target="_blank" rel="external">多线程</a></li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/java-basic/jvm.md" target="_blank" rel="external">JVM</a></li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/java-basic/nio.md" target="_blank" rel="external">NIO</a></li>
</ul>
</li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/design-pattern/index.md" target="_blank" rel="external">设计模式</a></li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/data-structures-and-algorithms/index.md" target="_blank" rel="external">数据结构与算法</a><ul>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/data-structures-and-algorithms/algorithms.md" target="_blank" rel="external">算法</a></li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/data-structures-and-algorithms/data-structures.md" target="_blank" rel="external">数据结构</a></li>
</ul>
</li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/java-web/index.md" target="_blank" rel="external">JavaWeb</a><ul>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/java-web/http.md" target="_blank" rel="external">HTTP基础</a></li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/java-web/java-web-basic.md" target="_blank" rel="external">JavaWeb基础</a></li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/java-web/spring.md" target="_blank" rel="external">Spring系列</a></li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/java-web/mybatis.md" target="_blank" rel="external">MyBatis</a></li>
<li>Hibernate</li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/java-web/tomcat.md" target="_blank" rel="external">Tomcat</a></li>
</ul>
</li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/db-cache/index.md" target="_blank" rel="external">数据库与缓存</a><ul>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/db-cache/db_basic.md" target="_blank" rel="external">数据库基本理论</a></li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/db-cache/cache_basic.md" target="_blank" rel="external">缓存基本理论</a></li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/db-cacahe/db-index.md" target="_blank" rel="external">数据库索引</a></li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/db-cache/sharding.md" target="_blank" rel="external">分库分表</a></li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/db-cache/mysql.md" target="_blank" rel="external">MySQL</a></li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/db-cache/mongodb.md" target="_blank" rel="external">MongoDB</a></li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/db-cache/redis.md" target="_blank" rel="external">Redis</a></li>
</ul>
</li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/mq/index.md" target="_blank" rel="external">消息队列</a><ul>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/mq/basic.md" target="_blank" rel="external">MQ基础</a></li>
</ul>
</li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/distributed/index.md" target="_blank" rel="external">分布式</a></li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/mic-service/index.md" target="_blank" rel="external">微服务</a></li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/security-performance/index.md" target="_blank" rel="external">安全和性能</a><ul>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/security-performance/security.md" target="_blank" rel="external">安全</a></li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/security-performance/performance.md" target="_blank" rel="external">性能</a></li>
</ul>
</li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/network-server/index.md" target="_blank" rel="external">网络与服务器</a><ul>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/network-server/network.md" target="_blank" rel="external">计算机网络</a></li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/network-server/nginx.md" target="_blank" rel="external">Nginx</a></li>
</ul>
</li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/software_engineering/index.md" target="_blank" rel="external">软件工程</a><ul>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/software_engineering-server/uml.md" target="_blank" rel="external">UML</a></li>
</ul>
</li>
<li><a href="https://github.com/guanzhenxing/java_interview_manual/blob/master/business/index.md" target="_blank" rel="external">业务</a></li>
</ul>
<hr>
<p>主要参考：</p>
<ul>
<li><a href="http://blog.720ui.com/2018/java_interview_final/" target="_blank" rel="external">Java面试通关要点汇总集【终极版】</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome" target="_blank" rel="external">《后端架构师技术图谱》</a></li>
<li><code>https://github.com/hadyang/interview</code></li>
<li><code>https://github.com/crossoverJie/Java-Interview</code></li>
<li><a href="https://segmentfault.com/a/1190000012063898" target="_blank" rel="external">后台开发常问面试题集锦</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java面试手册&quot;&gt;&lt;a href=&quot;#Java面试手册&quot; class=&quot;headerlink&quot; title=&quot;Java面试手册&quot;&gt;&lt;/a&gt;Java面试手册&lt;/h1&gt;&lt;p&gt;《Java面试手册》整理了从业到现在看到的、经历过的一些Java面试题。&lt;/p&gt;
&lt;p&gt;主要
    
    </summary>
    
      <category term="读书笔记" scheme="http://webfuse.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://webfuse.cn/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="http://webfuse.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>基于Token的权限认证服务</title>
    <link href="http://webfuse.cn/2018/03/11/%E5%9F%BA%E4%BA%8EToken%E7%9A%84%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1/"/>
    <id>http://webfuse.cn/2018/03/11/基于Token的权限认证服务/</id>
    <published>2018-03-11T14:03:58.000Z</published>
    <updated>2018-07-28T03:19:46.930Z</updated>
    
    <content type="html"><![CDATA[<p>在这两年接触的项目基本上是基于前后端分离、多种后端服务组合而成的，这有别于先前的“单体”的项目，而且我们还需要考虑外部应用接入的场景、用户-服务的鉴权、服务-服务的鉴权等多种鉴权场景。</p>
<p>本方案基于客户端Token与网关结合的方式。所有的客户端请求都经过网关，网关将校验客户端发送上来的Token等信息，如果通过则转发给对应的服务，如果不通过则直接返回40X给客户端。</p>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><img src="/2018/03/11/基于Token的权限认证服务/auth-arch.png" alt="auth-arch.png" title="">
<ol>
<li>获得authorize,用户/设备从UAA Service中获得authorize信息</li>
<li>附加mac token,请求在访问服务时候附加上mac token</li>
<li>Gateway进行认证，Gateway将收到的每个mac token发送给UAA Service进行校验</li>
<li>每个服务只有权限去操作自己负责的那部分功能（待规划）</li>
</ol>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><img src="/2018/03/11/基于Token的权限认证服务/auth-sequence.png" alt="auth-sequence.png" title="">
<ol>
<li>用户/客户端从UAA Service中获得Token</li>
<li>如果UAA Service中无此用户/客户端,则抛出AuthorizationException异常并返回401</li>
<li>如果UAA Service认证成功，返回对应的Token信息</li>
<li>用户的请求数据，请求头Authorization中带上Token信息</li>
<li>网关过滤所有的请求，携带Token、请求信息向UAA Service请求鉴权</li>
<li>如果UAA Service鉴权失败，抛出AuthenticationException异常并返回403</li>
<li>如果UAA Service鉴权成功，返回用户的权限等信息</li>
<li>网关向业务发起请求（此时，不携带授权信息。因为鉴权等都在网关处理了）</li>
<li>业务服务向微服务发起请求，同样也不携带授权信息</li>
<li>返回结果给用户</li>
</ol>
<h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>根据开发阶段的鉴权、用户-服务的鉴权、服务-服务的鉴权等不同的场景，定义了三种方式的协议。</p>
<h3 id="Debug-Token协议"><a href="#Debug-Token协议" class="headerlink" title="Debug Token协议"></a>Debug Token协议</h3><p>debug token适用于在开发测试环境调试API。</p>
<h4 id="协议-1"><a href="#协议-1" class="headerlink" title="协议"></a>协议</h4><p>在Client发出api请求之前，必须将debug token的信息放在HTTP Header的Authorization里面。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Authorization:DEBUG userid=&quot;123456&quot;,realm=&quot;&quot;</div></pre></td></tr></table></figure>
<p>上面的代码中：</p>
<blockquote>
<p>userid为调试的用户</p>
<p>realm为可选字段，预定为用户所在的领域(应用、行业或者机构）</p>
</blockquote>
<h4 id="示例（伪代码）"><a href="#示例（伪代码）" class="headerlink" title="示例（伪代码）"></a>示例（伪代码）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GET /v0.1/resources HTTP/1.1</div><div class="line">Host: a.dynamax.io</div><div class="line">Accept: application/json</div><div class="line">Authorization: DEBUG userid=&apos;&apos;,realm=&apos;&apos;</div></pre></td></tr></table></figure>
<h3 id="Mac-Token协议"><a href="#Mac-Token协议" class="headerlink" title="Mac Token协议"></a>Mac Token协议</h3><p>mac token适用于不安全网络下的API授权</p>
<h4 id="协议-2"><a href="#协议-2" class="headerlink" title="协议"></a>协议</h4><p>通过“登录接口”可以获得Token。mac_token的数据结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;user_id&quot;:&quot;&quot;, //用户标识</div><div class="line">    &quot;access_token&quot;:&quot;&quot;, //token标识</div><div class="line">    &quot;expires_at&quot;:&quot;&quot;,    //本token的过期时间</div><div class="line">    &quot;refresh_token&quot;:&quot;&quot;,   //用以续期</div><div class="line">    &quot;mac_key&quot;:&quot;&quot;,   //hmac的密钥</div><div class="line">    &quot;mac_algorithm&quot;:&quot;hmac-sha-256&quot;  //hmac算法的名称</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>hmac算法见：[[<a href="https://tools.ietf.org/html/rfc2104" target="_blank" rel="external">https://tools.ietf.org/html/rfc2104</a>]]</p>
<p>在Client发出api请求之前，必须将mac token的信息放在HTTP Header的Authorization里面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Authorization:MAC id=&quot;&quot;,nonce=&quot;&quot;,mac=&quot;&quot;</div></pre></td></tr></table></figure></p>
<p>上面的代码中：</p>
<blockquote>
<p>id为mac_token.access_token</p>
<p>nonce为 时间戳:随机码（客户端生成），有效时间+-5分钟</p>
<p>mac为请求签名： mac=base64(hmac(mac_token.mac_key,mac_token.mac_algorithm,request_content))</p>
<p>request_content = nonce + \n + http-method + \n + request-url + \n + host + \n </p>
<p>http-method，请求的方法，大写，如：GET</p>
<p>request-url，请求的地址（包含参数的部分，不包含域名部分），区分大小写，如/v0.1/databases</p>
<p>host，为HTTP Header中的host，区分大小写，如dynamax.io</p>
</blockquote>
<h4 id="示例-伪代码）"><a href="#示例-伪代码）" class="headerlink" title="示例(伪代码）"></a>示例(伪代码）</h4><p>获得token</p>
<p><strong>request</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">POST /v0.1/tokens HTTP/1.1</div><div class="line">Host: api.uaa.dynamax.io</div><div class="line">Accept: application/json</div><div class="line">Content-Type: application/json</div><div class="line">&#123;</div><div class="line">    &quot;username&quot;:&quot;330134&quot;,</div><div class="line">    &quot;password&quot;:&quot;******&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>reqponse</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 201 Created</div><div class="line">Content-Type: application/json;charset=UTF-8</div><div class="line">Cache-Control: no-store</div><div class="line">Pragma: no-Cache</div><div class="line">&#123;</div><div class="line">    &quot;user_id&quot;:&quot;&quot;,</div><div class="line">    &quot;access_token&quot;:&quot;&quot;,</div><div class="line">    &quot;expires_at&quot;:&quot;&quot;,</div><div class="line">    &quot;refresh_token&quot;:&quot;&quot;,</div><div class="line">    &quot;mac_key&quot;:&quot;&quot;,</div><div class="line">    &quot;mac_algorithm&quot;:&quot;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="访问资源"><a href="#访问资源" class="headerlink" title="访问资源"></a>访问资源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GET /v0.1/resources HTTP/1.1</div><div class="line">Host: resources.dynamax.io</div><div class="line">Accept: application/json</div><div class="line">Authorization:MAC id=&quot;adFeww3Fw4VV09876&quot;,nonce=&quot;1234234345343:adfasd32&quot;,mac=&quot;SDFS8weadfa42234&quot;</div></pre></td></tr></table></figure>
<h3 id="Bearer-Token协议"><a href="#Bearer-Token协议" class="headerlink" title="Bearer Token协议"></a>Bearer Token协议</h3><p>bearer token适用于安全网络下的api授权。也就是说，bearer适用于微服务之间的相互调用的api授权。</p>
<h4 id="协议-3"><a href="#协议-3" class="headerlink" title="协议"></a>协议</h4><p>可以通过“bearer_token”的接口获得相应的bearer_token，数据结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">&quot;user_id&quot;:&quot;&quot;, //用户标识</div><div class="line">&quot;access_token&quot;:&quot;&quot; //token标识</div><div class="line">&quot;expires_at&quot;:&quot;&quot; //本token的过期时间</div><div class="line">&quot;refresh_token&quot;:&quot;&quot; //用以续期</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Client发出api请求之前，必须将bearer token的信息放在HTTP Header的Authorization里面。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Authorization:BEARER &quot;XXX123XXXXX&quot; user_id:&quot;&quot;</div></pre></td></tr></table></figure>
<p>上面的代码中：</p>
<blockquote>
<p>“XXX123XXXXX”为bearer_token.access_token</p>
<p>user_id可选，该值位获得bearer token对应的账号。该值用来传递用户信息到其他服务端，用来判断是否有权限。</p>
</blockquote>
<h2 id="待优化的点"><a href="#待优化的点" class="headerlink" title="待优化的点"></a>待优化的点</h2><ul>
<li>怎么鉴定一个请求是否需要认证？白名单？</li>
<li>各个业务服务以及微服务是否需要再次认证？会不会出现绕过网关的情况？</li>
<li>所有的服务都通过网关，在UAA Service中进行鉴权，会不会造成UAA Service是个瓶颈点？</li>
<li>是否能够很方便地扩展到OAuth2？</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这两年接触的项目基本上是基于前后端分离、多种后端服务组合而成的，这有别于先前的“单体”的项目，而且我们还需要考虑外部应用接入的场景、用户-服务的鉴权、服务-服务的鉴权等多种鉴权场景。&lt;/p&gt;
&lt;p&gt;本方案基于客户端Token与网关结合的方式。所有的客户端请求都经过网关，网
    
    </summary>
    
      <category term="UAA" scheme="http://webfuse.cn/categories/UAA/"/>
    
    
      <category term="实战" scheme="http://webfuse.cn/tags/%E5%AE%9E%E6%88%98/"/>
    
      <category term="权限认证" scheme="http://webfuse.cn/tags/%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>RBAC实践</title>
    <link href="http://webfuse.cn/2018/03/01/RBAC%E5%AE%9E%E8%B7%B5/"/>
    <id>http://webfuse.cn/2018/03/01/RBAC实践/</id>
    <published>2018-03-01T14:34:42.000Z</published>
    <updated>2018-07-28T03:19:46.912Z</updated>
    
    <content type="html"><![CDATA[<p>RBAC，即大家很熟悉的“基于角色的访问控制”。理论什么的这里就不讲了，重点介绍下一种基于RBAC的实践。</p>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ul>
<li>领域：Realm，角色的定义范围。</li>
<li>角色：Role，一组权限的集合。角色必须定义在指定领域内</li>
<li>资源：Resource，主要应用于前端UI元素可见性方面的权限管控</li>
<li>操作：Action，主要应用于服务端api调用合法性方面的管控</li>
<li>权限：Permission，一组“资源+操作”的组合，并具备一个用户易于理解的名称</li>
</ul>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="角色-ROLE-INFO"><a href="#角色-ROLE-INFO" class="headerlink" title="角色 ROLE_INFO"></a>角色 ROLE_INFO</h3><pre><code>{
    &quot;id&quot;:&quot;&quot;, // 角色id
    &quot;tenant&quot;:&quot;&quot;, // 租户id
    &quot;code&quot;:&quot;&quot;, // 角色代码
    &quot;realm&quot;:&quot;&quot;, // 角色领域，global:应用内全局角色；app：app端角色；admin：管理端角色；web: web前端角色；
    &quot;realm_id&quot;:&quot;&quot;, // 领域id，选填。
    &quot;name&quot;:&quot;&quot;, // 角色名称
    &quot;status&quot;:0, // 状态，0 启用，1 禁用
    &quot;type&quot;:0, // 类型：0 正常角色，1 临时角色，2 默认角色
    &quot;valid&quot;:1, // 2：未生效，1：生效
    &quot;valid_time&quot;:&quot;&quot;, // 生效时间
    &quot;invalid_time&quot;:&quot;&quot;, // 失效时间
    &quot;remark&quot;:&quot;管理员&quot;， // 角色备注
    &quot;permissions&quot;: // 分配的权限列表
        [
            PERMISSION_INFO
        ]
}
</code></pre><h3 id="资源-RESOURCE-INFO"><a href="#资源-RESOURCE-INFO" class="headerlink" title="资源 RESOURCE_INFO"></a>资源 RESOURCE_INFO</h3><pre><code>{
    &quot;id&quot;:&quot;&quot;, // 资源id
    &quot;client&quot;:&quot;&quot;, // 客户端类型，取值：app，web，admin
    &quot;code&quot;:&quot;&quot;, // 资源标识符，客户端控制用，全局唯一
    &quot;tag&quot;:&quot;&quot;, // 资源标签
    &quot;remark&quot;:&quot;&quot; // 资源名称，管理后台显示用
}
</code></pre><h3 id="权限-PERMISSION-INFO"><a href="#权限-PERMISSION-INFO" class="headerlink" title="权限 PERMISSION_INFO"></a>权限 PERMISSION_INFO</h3><pre><code>{
    &quot;id&quot;:&quot;&quot;, // 权限id
    &quot;name&quot;:&quot;&quot;, // 权限名称
    &quot;code&quot;:&quot;&quot;, // 权限代码
    &quot;status&quot;:0, // 状态，0 启用，1 禁用
    &quot;remark&quot;:&quot;&quot;, // 权限备注
    &quot;actions&quot;:[ // 权限对应的ACTION列表
        ACTION_INFO,
        ACTION_INFO,
        ...
    ],
    &quot;resources&quot;:[ // 权限对应的资源列表
        RESOURCE_INFO,
        RESOURCE_INFO,
        ...
    ]
}
</code></pre><h3 id="操作-ACTION-INFO"><a href="#操作-ACTION-INFO" class="headerlink" title="操作 ACTION_INFO"></a>操作 ACTION_INFO</h3><pre><code>{
    &quot;id&quot;:&quot;&quot;, // 操作id
    &quot;code&quot;:&quot;&quot;, // 全局唯一:包名.类名.方法
    &quot;biz_type&quot;:&quot;&quot;, // 二级服务需要填写此项
    &quot;uri&quot;:&quot;&quot;, // Restful api，管理后台显示用
    &quot;remark&quot;:&quot;&quot; // api名称，管理后台显示用
}
</code></pre><h2 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h2><h3 id="服务端权限校验流程"><a href="#服务端权限校验流程" class="headerlink" title="服务端权限校验流程"></a>服务端权限校验流程</h3><ol>
<li>当前请求接口有@RequirePermission注解，进入鉴权流程。没有@RequirePermission注解，返回鉴权成功</li>
<li>【当前请求接口的@RequirePermission内的权限列表】与【用户的拥有的权限列表】有交集，返回鉴权成功。无交集返回鉴权失败。</li>
<li>RBAC服务器故障，导致角色数据无法获取时，返回鉴权失败，同时启动RBAC Server存活检测线程，存活检查按递增间隔进行检测。发现RBAC Server正常后，重新加载角色数据。</li>
</ol>
<h3 id="客户端权限校验流程"><a href="#客户端权限校验流程" class="headerlink" title="客户端权限校验流程"></a>客户端权限校验流程</h3><ol>
<li>每个组件将自己的所有UI元素中涉及权限控制的资源做成【权限资源列表】，这些资源默认不可见。</li>
<li>从RBAC获取当前登录用户的可见资源列表。</li>
<li>当用户进入某个page时，获取【用户可见资源列表】与【权限资源列表】的交集，将交集的资源设置为可见。</li>
<li>如果RBAC服务端无法连接，则【用户可见资源列表】为空，这些受控资源不可见。</li>
</ol>
<h3 id="缓存更新流程"><a href="#缓存更新流程" class="headerlink" title="缓存更新流程"></a>缓存更新流程</h3><ol>
<li>服务端的角色缓存数据通过MQ订阅通知实现实时更新。</li>
<li>客户端如果使用IM组件时，通过IM事件消息触发更新。如果未使用IM组件，采用定时到服务端检查版本变更的策略，如果数据有更新再去RBAC服务端拉取。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RBAC，即大家很熟悉的“基于角色的访问控制”。理论什么的这里就不讲了，重点介绍下一种基于RBAC的实践。&lt;/p&gt;
&lt;h2 id=&quot;名词解释&quot;&gt;&lt;a href=&quot;#名词解释&quot; class=&quot;headerlink&quot; title=&quot;名词解释&quot;&gt;&lt;/a&gt;名词解释&lt;/h2&gt;&lt;ul&gt;
    
    </summary>
    
      <category term="UAA" scheme="http://webfuse.cn/categories/UAA/"/>
    
    
      <category term="实战" scheme="http://webfuse.cn/tags/%E5%AE%9E%E6%88%98/"/>
    
      <category term="RBAC" scheme="http://webfuse.cn/tags/RBAC/"/>
    
  </entry>
  
</feed>
